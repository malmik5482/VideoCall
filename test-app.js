#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π CosmosChat
 */

const WebSocket = require('ws');
const axios = require('axios').default;

const SERVER_URL = 'http://localhost:3002';
const WS_URL = 'ws://localhost:3002/ws';

class CosmosTestSuite {
    constructor() {
        this.results = [];
        this.ws = null;
    }

    async runAllTests() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CosmosChat...\n');
        
        // 1. –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        await this.testServerHealth();
        
        // 2. –¢–µ—Å—Ç ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await this.testIceConfig();
        
        // 3. –¢–µ—Å—Ç WebSocket
        await this.testWebSocket();
        
        // 4. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await this.testRegistration();
        
        // 5. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await this.testUserSearch();
        
        // 6. –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.testMessaging();
        
        // –ò—Ç–æ–≥–∏
        this.printResults();
    }
    
    async testServerHealth() {
        console.log('üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
            const response = await axios.get(`${SERVER_URL}/health`);
            if (response.status === 200) {
                this.addResult('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', true);
            }
        } catch (error) {
            this.addResult('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', false, error.message);
        }
        
        try {
            const response = await axios.get(`${SERVER_URL}/api/status`);
            const data = response.data;
            this.addResult('API —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç', true, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.users}, –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${data.connections}`);
        } catch (error) {
            this.addResult('API —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç', false, error.message);
        }
    }
    
    async testIceConfig() {
        console.log('üßä –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        try {
            const response = await axios.get(`${SERVER_URL}/api/ice-config`);
            const config = response.data;
            
            if (config.iceServers && config.iceServers.length > 0) {
                const turnServer = config.iceServers.find(s => 
                    s.urls && (Array.isArray(s.urls) ? s.urls[0] : s.urls).includes('turn:')
                );
                
                if (turnServer) {
                    this.addResult('TURN —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω', true, 
                        `TURN: ${Array.isArray(turnServer.urls) ? turnServer.urls[0] : turnServer.urls}`);
                } else {
                    this.addResult('TURN —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω', false, 'TURN —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                }
            }
        } catch (error) {
            this.addResult('ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', false, error.message);
        }
    }
    
    async testWebSocket() {
        console.log('üîå –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket...');
        
        return new Promise((resolve) => {
            this.ws = new WebSocket(WS_URL);
            
            const timeout = setTimeout(() => {
                this.addResult('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', false, '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                resolve();
            }, 5000);
            
            this.ws.on('open', () => {
                clearTimeout(timeout);
                this.addResult('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', true);
                resolve();
            });
            
            this.ws.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    if (message.type === 'connected') {
                        this.addResult('WebSocket –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', true, message.message);
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            });
            
            this.ws.on('error', (error) => {
                clearTimeout(timeout);
                this.addResult('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', false, error.message);
                resolve();
            });
        });
    }
    
    async testRegistration() {
        console.log('üë§ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
        
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.addResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return;
        }
        
        return new Promise((resolve) => {
            const testUser = {
                type: 'register',
                name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                phone: '+79991234567'
            };
            
            const timeout = setTimeout(() => {
                this.addResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, '–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞');
                resolve();
            }, 3000);
            
            const messageHandler = (data) => {
                try {
                    const message = JSON.parse(data);
                    if (message.type === 'register_success') {
                        clearTimeout(timeout);
                        this.addResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, 
                            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.user.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
                        this.ws.off('message', messageHandler);
                        resolve();
                    } else if (message.type === 'register_error') {
                        clearTimeout(timeout);
                        this.addResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, message.message);
                        this.ws.off('message', messageHandler);
                        resolve();
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            };
            
            this.ws.on('message', messageHandler);
            this.ws.send(JSON.stringify(testUser));
        });
    }
    
    async testUserSearch() {
        console.log('üîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.addResult('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', false, 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return;
        }
        
        return new Promise((resolve) => {
            const searchRequest = {
                type: 'search_user',
                query: '79001234567'
            };
            
            const timeout = setTimeout(() => {
                this.addResult('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', false, '–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞');
                resolve();
            }, 3000);
            
            const messageHandler = (data) => {
                try {
                    const message = JSON.parse(data);
                    if (message.type === 'search_results') {
                        clearTimeout(timeout);
                        if (message.users && message.users.length > 0) {
                            this.addResult('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', true, 
                                `–ù–∞–π–¥–µ–Ω–æ ${message.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                        } else {
                            this.addResult('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', true, 
                                '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                        }
                        this.ws.off('message', messageHandler);
                        resolve();
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            };
            
            this.ws.on('message', messageHandler);
            this.ws.send(JSON.stringify(searchRequest));
        });
    }
    
    async testMessaging() {
        console.log('üí¨ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
        
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.addResult('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', false, 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return;
        }
        
        return new Promise((resolve) => {
            const message = {
                type: 'chat_message',
                roomId: 'test_room',
                text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            };
            
            const timeout = setTimeout(() => {
                // –°—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
                this.addResult('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', true, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                resolve();
            }, 1000);
            
            const messageHandler = (data) => {
                try {
                    const response = JSON.parse(data);
                    if (response.type === 'error') {
                        clearTimeout(timeout);
                        this.addResult('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', false, response.message);
                        this.ws.off('message', messageHandler);
                        resolve();
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            };
            
            this.ws.on('message', messageHandler);
            this.ws.send(JSON.stringify(message));
        });
    }
    
    addResult(test, success, details = '') {
        this.results.push({ test, success, details });
        console.log(`  ${success ? '‚úÖ' : '‚ùå'} ${test}${details ? ': ' + details : ''}`);
    }
    
    printResults() {
        console.log('\n' + '='.repeat(60));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('='.repeat(60));
        
        const total = this.results.length;
        const passed = this.results.filter(r => r.success).length;
        const failed = total - passed;
        
        console.log(`\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
        
        if (failed > 0) {
            console.log('\n‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:');
            this.results.filter(r => !r.success).forEach(r => {
                console.log(`  - ${r.test}: ${r.details}`);
            });
        }
        
        console.log('\n' + '='.repeat(60));
        console.log(passed === total ? 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!' : '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
        if (this.ws) {
            this.ws.close();
        }
        
        process.exit(failed > 0 ? 1 : 0);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new CosmosTestSuite();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ axios —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try {
    require.resolve('axios');
} catch(e) {
    console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º axios –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    require('child_process').execSync('npm install axios', { stdio: 'inherit' });
}

tester.runAllTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});