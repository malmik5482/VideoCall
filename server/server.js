const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
const PORT = process.env.PORT || 3002;
const HOST = '0.0.0.0';
const NODE_ENV = process.env.NODE_ENV || 'development';

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../client')));

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —á–∞—Ç–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
const wss = new WebSocket.Server({ 
  server,
  path: '/ws',
  perMessageDeflate: false,
  clientTracking: true
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const users = new Map(); // userId -> userData
const rooms = new Map(); // roomId -> Set of ws connections
const connections = new Map(); // ws -> connectionData

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
  const clientIp = req.socket.remoteAddress;
  console.log(`üåê –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç ${clientIp}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connectionData = {
    id: generateId(),
    connectedAt: Date.now(),
    ip: clientIp,
    userId: null,
    roomId: null,
    isAlive: true
  };
  
  connections.set(ws, connectionData);
  
  // Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  ws.isAlive = true;
  ws.on('pong', () => {
    ws.isAlive = true;
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      handleMessage(ws, data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      ws.send(JSON.stringify({
        type: 'error',
        message: 'Invalid message format'
      }));
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  ws.on('close', () => {
    handleDisconnect(ws);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ws.send(JSON.stringify({
    type: 'connected',
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat!',
    connectionId: connectionData.id
  }));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
function handleMessage(ws, data) {
  const connection = connections.get(ws);
  
  switch(data.type) {
    case 'register':
      handleRegister(ws, data);
      break;
      
    case 'login':
      handleLogin(ws, data);
      break;
      
    case 'search_user':
      handleUserSearch(ws, data);
      break;
      
    case 'join_room':
      handleJoinRoom(ws, data);
      break;
      
    case 'leave_room':
      handleLeaveRoom(ws);
      break;
      
    case 'chat_message':
      handleChatMessage(ws, data);
      break;
      
    case 'offer':
    case 'answer':
    case 'ice_candidate':
      handleWebRTCSignaling(ws, data);
      break;
      
    case 'call_request':
      handleCallRequest(ws, data);
      break;
      
    case 'call_response':
      handleCallResponse(ws, data);
      break;
      
    case 'end_call':
      handleEndCall(ws, data);
      break;
      
    case 'ping':
      ws.send(JSON.stringify({ type: 'pong' }));
      break;
      
    default:
      console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleRegister(ws, data) {
  const { name, phone } = data;
  
  if (!name || !phone) {
    ws.send(JSON.stringify({
      type: 'register_error',
      message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
    }));
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–º–µ—Ä
  const existingUser = Array.from(users.values()).find(u => u.phone === phone);
  if (existingUser) {
    ws.send(JSON.stringify({
      type: 'register_error',
      message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    }));
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userId = generateId();
  const userData = {
    id: userId,
    name,
    phone,
    avatar: generateAvatar(name),
    status: 'online',
    registeredAt: Date.now()
  };
  
  users.set(userId, userData);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const connection = connections.get(ws);
  connection.userId = userId;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  ws.send(JSON.stringify({
    type: 'register_success',
    user: userData
  }));
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${name} (${phone})`);
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleLogin(ws, data) {
  const { phone } = data;
  
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  const user = Array.from(users.values()).find(u => u.phone === phone);
  
  if (!user) {
    ws.send(JSON.stringify({
      type: 'login_error',
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }));
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  user.status = 'online';
  const connection = connections.get(ws);
  connection.userId = user.id;
  
  ws.send(JSON.stringify({
    type: 'login_success',
    user
  }));
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.name}`);
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function handleUserSearch(ws, data) {
  const { query } = data;
  
  // –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const demoUsers = [
    {
      id: 'demo_1',
      phone: '79001234567',
      name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      avatar: { initials: '–ê–°', color: '#6366f1' },
      status: 'online'
    },
    {
      id: 'demo_2',
      phone: '79009876543',
      name: '–ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤',
      avatar: { initials: '–ú–ü', color: '#3b82f6' },
      status: 'online'
    },
    {
      id: 'demo_3',
      phone: '79005556677',
      name: '–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
      avatar: { initials: '–ï–ò', color: '#06b6d4' },
      status: 'offline'
    }
  ];
  
  // –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  const cleanQuery = query.replace(/\D/g, '');
  
  // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const realUsers = Array.from(users.values()).filter(user => {
    const cleanPhone = user.phone.replace(/\D/g, '');
    return cleanPhone.includes(cleanQuery) || user.name.toLowerCase().includes(query.toLowerCase());
  });
  
  // –ò—â–µ–º —Å—Ä–µ–¥–∏ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const foundDemoUsers = demoUsers.filter(user => {
    const cleanPhone = user.phone.replace(/\D/g, '');
    return cleanPhone.includes(cleanQuery) || user.name.toLowerCase().includes(query.toLowerCase());
  });
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const results = [...realUsers, ...foundDemoUsers];
  
  ws.send(JSON.stringify({
    type: 'search_results',
    users: results
  }));
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
function handleJoinRoom(ws, data) {
  const { roomId } = data;
  const connection = connections.get(ws);
  
  // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (connection.roomId) {
    handleLeaveRoom(ws);
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!rooms.has(roomId)) {
    rooms.set(roomId, new Set());
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
  const room = rooms.get(roomId);
  room.add(ws);
  connection.roomId = roomId;
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
  broadcastToRoom(roomId, {
    type: 'user_joined',
    userId: connection.userId,
    roomId
  }, ws);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const participants = Array.from(room).map(socket => {
    const conn = connections.get(socket);
    const user = users.get(conn.userId);
    return user;
  }).filter(Boolean);
  
  ws.send(JSON.stringify({
    type: 'room_joined',
    roomId,
    participants
  }));
}

// –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
function handleLeaveRoom(ws) {
  const connection = connections.get(ws);
  
  if (!connection.roomId) return;
  
  const room = rooms.get(connection.roomId);
  if (room) {
    room.delete(ws);
    
    if (room.size === 0) {
      rooms.delete(connection.roomId);
    } else {
      broadcastToRoom(connection.roomId, {
        type: 'user_left',
        userId: connection.userId
      }, ws);
    }
  }
  
  connection.roomId = null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function handleChatMessage(ws, data) {
  const connection = connections.get(ws);
  const user = users.get(connection.userId);
  
  if (!user || !connection.roomId) {
    ws.send(JSON.stringify({
      type: 'error',
      message: '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ'
    }));
    return;
  }
  
  const message = {
    id: generateId(),
    type: 'chat_message',
    userId: user.id,
    userName: user.name,
    userAvatar: user.avatar,
    text: data.text,
    timestamp: Date.now()
  };
  
  broadcastToRoom(connection.roomId, message);
}

// WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥
function handleWebRTCSignaling(ws, data) {
  const connection = connections.get(ws);
  
  if (!connection.roomId) {
    ws.send(JSON.stringify({
      type: 'error',
      message: '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞'
    }));
    return;
  }
  
  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
  broadcastToRoom(connection.roomId, {
    ...data,
    from: connection.userId
  }, ws);
}

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫
function handleCallRequest(ws, data) {
  const { targetUserId } = data;
  const connection = connections.get(ws);
  const caller = users.get(connection.userId);
  
  // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const targetConnection = Array.from(connections.entries()).find(([_, conn]) => 
    conn.userId === targetUserId
  );
  
  if (!targetConnection) {
    ws.send(JSON.stringify({
      type: 'call_error',
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏'
    }));
    return;
  }
  
  const [targetWs] = targetConnection;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∑–≤–æ–Ω–∫–∞
  const callRoomId = `call_${generateId()}`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  targetWs.send(JSON.stringify({
    type: 'incoming_call',
    callRoomId,
    caller: {
      id: caller.id,
      name: caller.name,
      avatar: caller.avatar
    }
  }));
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
  ws.send(JSON.stringify({
    type: 'call_request_sent',
    callRoomId,
    targetUserId
  }));
}

// –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫
function handleCallResponse(ws, data) {
  const { callRoomId, accepted, callerId } = data;
  
  if (accepted) {
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±–æ–∏—Ö –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–≤–æ–Ω–∫–∞
    handleJoinRoom(ws, { roomId: callRoomId });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–≤–æ–Ω—è—â–µ–≥–æ
    const callerConnection = Array.from(connections.entries()).find(([_, conn]) => 
      conn.userId === callerId
    );
    
    if (callerConnection) {
      const [callerWs] = callerConnection;
      callerWs.send(JSON.stringify({
        type: 'call_accepted',
        callRoomId
      }));
    }
  } else {
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    const callerConnection = Array.from(connections.entries()).find(([_, conn]) => 
      conn.userId === callerId
    );
    
    if (callerConnection) {
      const [callerWs] = callerConnection;
      callerWs.send(JSON.stringify({
        type: 'call_declined'
      }));
    }
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function handleEndCall(ws, data) {
  const connection = connections.get(ws);
  
  if (connection.roomId && connection.roomId.startsWith('call_')) {
    broadcastToRoom(connection.roomId, {
      type: 'call_ended',
      userId: connection.userId
    });
    
    // –í—Å–µ –ø–æ–∫–∏–¥–∞—é—Ç –∫–æ–º–Ω–∞—Ç—É –∑–≤–æ–Ω–∫–∞
    const room = rooms.get(connection.roomId);
    if (room) {
      room.forEach(socket => {
        const conn = connections.get(socket);
        conn.roomId = null;
      });
      rooms.delete(connection.roomId);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
function handleDisconnect(ws) {
  const connection = connections.get(ws);
  
  if (connection) {
    console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${connection.id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (connection.userId) {
      const user = users.get(connection.userId);
      if (user) {
        user.status = 'offline';
      }
    }
    
    // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (connection.roomId) {
      handleLeaveRoom(ws);
    }
    
    connections.delete(ws);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateId() {
  return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function generateAvatar(name) {
  const colors = ['#6366f1', '#3b82f6', '#06b6d4', '#ec4899', '#8b5cf6'];
  const initials = name.split(' ')
    .map(word => word[0])
    .join('')
    .toUpperCase()
    .slice(0, 2);
  
  return {
    initials,
    color: colors[Math.floor(Math.random() * colors.length)]
  };
}

function broadcastToRoom(roomId, message, exclude = null) {
  const room = rooms.get(roomId);
  
  if (!room) return;
  
  const messageStr = JSON.stringify(message);
  
  room.forEach(socket => {
    if (socket !== exclude && socket.readyState === WebSocket.OPEN) {
      socket.send(messageStr);
    }
  });
}

// Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const interval = setInterval(() => {
  wss.clients.forEach(ws => {
    if (ws.isAlive === false) {
      handleDisconnect(ws);
      return ws.terminate();
    }
    
    ws.isAlive = false;
    ws.ping();
  });
}, 30000);

// API endpoints
app.get('/api/status', (req, res) => {
  res.json({
    status: 'online',
    users: users.size,
    connections: connections.size,
    rooms: rooms.size,
    uptime: process.uptime()
  });
});

app.get('/api/ice-config', (req, res) => {
  res.json({
    iceServers: [
      {
        urls: ['turn:94.198.218.189:3478?transport=udp', 'turn:94.198.218.189:3478?transport=tcp'],
        username: 'webrtc',
        credential: 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN'
      },
      { urls: 'stun:94.198.218.189:3478' },
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun.sipnet.ru:3478' }
    ]
  });
});

app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', () => {
  console.log('SIGTERM signal received: closing HTTP server');
  clearInterval(interval);
  server.close(() => {
    console.log('HTTP server closed');
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, HOST, () => {
  console.log(`üöÄ CosmosChat —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
  console.log(`üìç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${NODE_ENV}`);
  console.log(`üåê WebSocket endpoint: ws://localhost:${PORT}/ws`);
  console.log(`üîê TURN —Å–µ—Ä–≤–µ—Ä: 94.198.218.189:3478`);
});