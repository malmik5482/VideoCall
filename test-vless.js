// –¢–µ—Å—Ç VLESS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const WebSocket = require('ws');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º VLESS WebSocket proxy...');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ–∫—Å–∏
const ws = new WebSocket('ws://localhost:8080');

ws.on('open', () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–∫—Å–∏');
});

ws.on('message', (data) => {
    try {
        const message = JSON.parse(data.toString());
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        if (message.type === 'vless-connected') {
            console.log('üéâ VLESS —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
            
            // –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            setTimeout(() => {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                ws.send(JSON.stringify({
                    type: 'webrtc-data',
                    data: 'test-payload'
                }));
            }, 1000);
            
            // –ó–∞–∫—Ä–æ–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                console.log('üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
                ws.close();
            }, 5000);
        }
    } catch (error) {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data.length, '–±–∞–π—Ç');
    }
});

ws.on('close', () => {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
});

ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
setTimeout(() => {
    console.log('‚è∞ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
    ws.close();
    process.exit(0);
}, 15000);