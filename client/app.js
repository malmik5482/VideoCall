// –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ CosmosChat
console.log('üöÄ CosmosChat –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = {
    currentUser: null,
    socket: null,
    peerConnection: null,
    localStream: null,
    remoteStream: null,
    isInCall: false
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    // –≠–∫—Ä–∞–Ω—ã
    loginScreen: document.getElementById('loginScreen'),
    chatScreen: document.getElementById('chatScreen'),
    videoScreen: document.getElementById('videoScreen'),
    
    // –§–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    userName: document.getElementById('userName'),
    userPhone: document.getElementById('userPhone'),
    loginBtn: document.getElementById('loginBtn'),
    
    // –ß–∞—Ç
    currentUserName: document.getElementById('currentUserName'),
    logoutBtn: document.getElementById('logoutBtn'),
    usersList: document.getElementById('usersList'),
    messagesArea: document.getElementById('messagesArea'),
    messageInput: document.getElementById('messageInput'),
    sendBtn: document.getElementById('sendBtn'),
    callBtn: document.getElementById('callBtn'),
    
    // –í–∏–¥–µ–æ
    localVideo: document.getElementById('localVideo'),
    remoteVideo: document.getElementById('remoteVideo'),
    toggleMic: document.getElementById('toggleMic'),
    toggleCamera: document.getElementById('toggleCamera'),
    endCall: document.getElementById('endCall')
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    console.log(`üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenName}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    switch(screenName) {
        case 'login':
            elements.loginScreen.classList.add('active');
            break;
        case 'chat':
            elements.chatScreen.classList.add('active');
            break;
        case 'video':
            elements.videoScreen.classList.add('active');
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
function login() {
    const name = elements.userName.value.trim();
    const phone = elements.userPhone.value.trim();
    
    if (!name || !phone) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω');
        return;
    }
    
    console.log(`‚úÖ –í—Ö–æ–¥: ${name} (${phone})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.currentUser = {
        name: name,
        phone: phone,
        id: Date.now().toString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('cosmosUser', JSON.stringify(app.currentUser));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    elements.currentUserName.textContent = name;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    connectWebSocket();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
    showScreen('chat');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addMessage({
        author: '–°–∏—Å—Ç–µ–º–∞',
        text: `${name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat! üåå`,
        time: new Date().toLocaleTimeString()
    });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function logout() {
    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    app.currentUser = null;
    localStorage.removeItem('cosmosUser');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
    if (app.socket) {
        app.socket.close();
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
    elements.userName.value = '';
    elements.userPhone.value = '';
    elements.messagesArea.innerHTML = '<div class="welcome-message">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat! üåå</div>';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ª–æ–≥–∏–Ω—É
    showScreen('login');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws`;
    
    console.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${wsUrl}`);
    
    try {
        app.socket = new WebSocket(wsUrl);
        
        app.socket.onopen = () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            sendWebSocketMessage({
                type: 'join',
                user: app.currentUser
            });
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            sendWebSocketMessage({
                type: 'get-users'
            });
        };
        
        app.socket.onmessage = (event) => {
            handleWebSocketMessage(JSON.parse(event.data));
        };
        
        app.socket.onerror = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
        };
        
        app.socket.onclose = () => {
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            setTimeout(connectWebSocket, 3000); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        };
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
function sendWebSocketMessage(data) {
    if (app.socket && app.socket.readyState === WebSocket.OPEN) {
        app.socket.send(JSON.stringify(data));
    } else {
        console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
function handleWebSocketMessage(data) {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type);
    
    switch(data.type) {
        case 'users-list':
            updateUsersList(data.users);
            break;
        case 'message':
            addMessage(data.message);
            break;
        case 'user-joined':
            addSystemMessage(`${data.user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
            break;
        case 'user-left':
            addSystemMessage(`${data.user.name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
            break;
        case 'webrtc-offer':
            handleWebRTCOffer(data);
            break;
        case 'webrtc-answer':
            handleWebRTCAnswer(data);
            break;
        case 'webrtc-ice':
            handleWebRTCIce(data);
            break;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateUsersList(users) {
    elements.usersList.innerHTML = '';
    
    users.forEach(user => {
        if (user.id !== app.currentUser.id) {
            const userDiv = document.createElement('div');
            userDiv.className = 'user-item';
            userDiv.textContent = user.name;
            userDiv.onclick = () => startCall(user);
            elements.usersList.appendChild(userDiv);
        }
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function sendMessage() {
    const text = elements.messageInput.value.trim();
    
    if (!text) return;
    
    const message = {
        author: app.currentUser.name,
        text: text,
        time: new Date().toLocaleTimeString(),
        userId: app.currentUser.id
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    sendWebSocketMessage({
        type: 'message',
        message: message
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–≤–æ–π —á–∞—Ç
    addMessage(message, true);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    elements.messageInput.value = '';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(message, isOwn = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isOwn || message.userId === app.currentUser?.id ? 'own' : ''}`;
    
    messageDiv.innerHTML = `
        <div class="message-author">${message.author}</div>
        <div class="message-text">${message.text}</div>
        <div class="message-time">${message.time}</div>
    `;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const welcome = elements.messagesArea.querySelector('.welcome-message');
    if (welcome) welcome.remove();
    
    elements.messagesArea.appendChild(messageDiv);
    elements.messagesArea.scrollTop = elements.messagesArea.scrollHeight;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function addSystemMessage(text) {
    addMessage({
        author: '–°–∏—Å—Ç–µ–º–∞',
        text: text,
        time: new Date().toLocaleTimeString()
    });
}

// === WebRTC —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ ===

// –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
async function startCall(targetUser) {
    console.log(`üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å ${targetUser?.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        app.localStream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        });
        
        elements.localVideo.srcObject = app.localStream;
        showScreen('video');
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        createPeerConnection();
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await app.peerConnection.createOffer();
        await app.peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer
        sendWebSocketMessage({
            type: 'webrtc-offer',
            offer: offer,
            to: targetUser?.id
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function createPeerConnection() {
    const configuration = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            {
                urls: 'turn:94.198.218.189:3478',
                username: 'webrtc',
                credential: 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN'
            }
        ]
    };
    
    app.peerConnection = new RTCPeerConnection(configuration);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (app.localStream) {
        app.localStream.getTracks().forEach(track => {
            app.peerConnection.addTrack(track, app.localStream);
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    app.peerConnection.ontrack = (event) => {
        console.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        elements.remoteVideo.srcObject = event.streams[0];
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    app.peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            sendWebSocketMessage({
                type: 'webrtc-ice',
                candidate: event.candidate
            });
        }
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ offer
async function handleWebRTCOffer(data) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω offer');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫
    if (confirm('–í—Ö–æ–¥—è—â–∏–π –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫. –ü—Ä–∏–Ω—è—Ç—å?')) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            app.localStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });
            
            elements.localVideo.srcObject = app.localStream;
            showScreen('video');
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            createPeerConnection();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            await app.peerConnection.setRemoteDescription(data.offer);
            
            // –°–æ–∑–¥–∞–µ–º answer
            const answer = await app.peerConnection.createAnswer();
            await app.peerConnection.setLocalDescription(answer);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer
            sendWebSocketMessage({
                type: 'webrtc-answer',
                answer: answer,
                to: data.from
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–≤–æ–Ω–∫–∞:', error);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ answer
async function handleWebRTCAnswer(data) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω answer');
    try {
        await app.peerConnection.setRemoteDescription(data.answer);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
async function handleWebRTCIce(data) {
    console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
    try {
        await app.peerConnection.addIceCandidate(data.candidate);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function endCall() {
    console.log('üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (app.localStream) {
        app.localStream.getTracks().forEach(track => track.stop());
        app.localStream = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (app.peerConnection) {
        app.peerConnection.close();
        app.peerConnection = null;
    }
    
    // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ
    elements.localVideo.srcObject = null;
    elements.remoteVideo.srcObject = null;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —á–∞—Ç
    showScreen('chat');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
function toggleMicrophone() {
    if (app.localStream) {
        const audioTrack = app.localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            elements.toggleMic.style.opacity = audioTrack.enabled ? '1' : '0.5';
        }
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
function toggleCamera() {
    if (app.localStream) {
        const videoTrack = app.localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            elements.toggleCamera.style.opacity = videoTrack.enabled ? '1' : '0.5';
        }
    }
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===

// –í—Ö–æ–¥
elements.loginBtn.addEventListener('click', login);
elements.userName.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') login();
});
elements.userPhone.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') login();
});

// –í—ã—Ö–æ–¥
elements.logoutBtn.addEventListener('click', logout);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
elements.sendBtn.addEventListener('click', sendMessage);
elements.messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
});

// –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
elements.callBtn.addEventListener('click', () => startCall());
elements.endCall.addEventListener('click', endCall);
elements.toggleMic.addEventListener('click', toggleMicrophone);
elements.toggleCamera.addEventListener('click', toggleCamera);

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
window.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ CosmosChat –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    const savedUser = localStorage.getItem('cosmosUser');
    if (savedUser) {
        try {
            app.currentUser = JSON.parse(savedUser);
            elements.currentUserName.textContent = app.currentUser.name;
            connectWebSocket();
            showScreen('chat');
            console.log(`‚úÖ –ê–≤—Ç–æ–≤—Ö–æ–¥: ${app.currentUser.name}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞:', error);
            showScreen('login');
        }
    } else {
        showScreen('login');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (app.socket) {
        app.socket.close();
    }
    if (app.peerConnection) {
        app.peerConnection.close();
    }
});

console.log('‚úÖ CosmosChat –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');