// üé• CosmosCall - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤
console.log('üé• CosmosCall –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = {
    currentUser: null,
    socket: null,
    peerConnection: null,
    localStream: null,
    remoteStream: null,
    currentCall: null,
    isInCall: false,
    callTimer: null,
    callStartTime: null,
    onlineUsers: new Map()
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    // –≠–∫—Ä–∞–Ω—ã
    loginScreen: document.getElementById('loginScreen'),
    mainScreen: document.getElementById('mainScreen'),
    videoScreen: document.getElementById('videoScreen'),
    incomingCallScreen: document.getElementById('incomingCallScreen'),
    
    // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    userName: document.getElementById('userName'),
    userPhone: document.getElementById('userPhone'),
    loginBtn: document.getElementById('loginBtn'),
    
    // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    currentUserName: document.getElementById('currentUserName'),
    userAvatar: document.getElementById('userAvatar'),
    logoutBtn: document.getElementById('logoutBtn'),
    usersList: document.getElementById('usersList'),
    onlineCount: document.getElementById('onlineCount'),
    
    // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
    callerName: document.getElementById('callerName'),
    acceptCall: document.getElementById('acceptCall'),
    rejectCall: document.getElementById('rejectCall'),
    
    // –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
    localVideo: document.getElementById('localVideo'),
    remoteVideo: document.getElementById('remoteVideo'),
    callDuration: document.getElementById('callDuration'),
    calleeName: document.getElementById('calleeName'),
    toggleMic: document.getElementById('toggleMic'),
    toggleCamera: document.getElementById('toggleCamera'),
    toggleScreen: document.getElementById('toggleScreen'),
    endCall: document.getElementById('endCall')
};

// === –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞–º–∏ ===

function showScreen(screenName) {
    console.log(`üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenName}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    switch(screenName) {
        case 'login':
            elements.loginScreen.classList.add('active');
            break;
        case 'main':
            elements.mainScreen.classList.add('active');
            break;
        case 'video':
            elements.videoScreen.classList.add('active');
            break;
    }
}

function showIncomingCall(callerName) {
    elements.callerName.textContent = callerName;
    elements.incomingCallScreen.classList.add('active');
}

function hideIncomingCall() {
    elements.incomingCallScreen.classList.remove('active');
}

// === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===

function login() {
    const name = elements.userName.value.trim();
    const phone = elements.userPhone.value.trim();
    
    if (!name || !phone) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    console.log(`‚úÖ –í—Ö–æ–¥: ${name} (${phone})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.currentUser = {
        id: Date.now().toString(),
        name: name,
        phone: phone,
        avatar: name.charAt(0).toUpperCase()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('cosmosCallUser', JSON.stringify(app.currentUser));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    elements.currentUserName.textContent = name;
    elements.userAvatar.textContent = app.currentUser.avatar;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    connectWebSocket();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showScreen('main');
}

function logout() {
    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (app.isInCall) {
        endCall();
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
    if (app.socket) {
        app.socket.close();
    }
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    app.currentUser = null;
    app.onlineUsers.clear();
    localStorage.removeItem('cosmosCallUser');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
    elements.userName.value = '';
    elements.userPhone.value = '';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ª–æ–≥–∏–Ω—É
    showScreen('login');
}

// === WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ===

function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws`;
    
    console.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${wsUrl}`);
    
    try {
        app.socket = new WebSocket(wsUrl);
        
        app.socket.onopen = () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sendWebSocketMessage({
                type: 'register',
                user: app.currentUser
            });
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            sendWebSocketMessage({
                type: 'get-users'
            });
        };
        
        app.socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            handleWebSocketMessage(data);
        };
        
        app.socket.onerror = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        };
        
        app.socket.onclose = () => {
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            if (app.currentUser) {
                setTimeout(connectWebSocket, 3000);
            }
        };
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket:', error);
    }
}

function sendWebSocketMessage(data) {
    if (app.socket && app.socket.readyState === WebSocket.OPEN) {
        app.socket.send(JSON.stringify(data));
    } else {
        console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
}

function handleWebSocketMessage(data) {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type);
    
    switch(data.type) {
        case 'users-list':
            updateUsersList(data.users || []);
            break;
            
        case 'user-joined':
            if (data.user && data.user.id !== app.currentUser.id) {
                app.onlineUsers.set(data.user.id, data.user);
                updateUsersDisplay();
                showNotification(`${data.user.name} —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω`, 'success');
            }
            break;
            
        case 'user-left':
            if (data.userId) {
                const user = app.onlineUsers.get(data.userId);
                if (user) {
                    app.onlineUsers.delete(data.userId);
                    updateUsersDisplay();
                    showNotification(`${user.name} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏`, 'info');
                }
            }
            break;
            
        case 'incoming-call':
            handleIncomingCall(data);
            break;
            
        case 'call-accepted':
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
            break;
            
        case 'call-rejected':
            console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');
            endCall();
            break;
            
        case 'webrtc-offer':
            handleWebRTCOffer(data);
            break;
            
        case 'webrtc-answer':
            handleWebRTCAnswer(data);
            break;
            
        case 'webrtc-ice':
            handleWebRTCIce(data);
            break;
            
        case 'call-ended':
            handleCallEnded();
            break;
    }
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===

function updateUsersList(users) {
    app.onlineUsers.clear();
    
    users.forEach(user => {
        if (user.id !== app.currentUser?.id) {
            app.onlineUsers.set(user.id, user);
        }
    });
    
    updateUsersDisplay();
}

function updateUsersDisplay() {
    elements.usersList.innerHTML = '';
    elements.onlineCount.textContent = app.onlineUsers.size;
    
    if (app.onlineUsers.size === 0) {
        elements.usersList.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #999;">
                <p>üò¥ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω</p>
                <p style="font-size: 14px; margin-top: 10px;">–û–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
        `;
        return;
    }
    
    app.onlineUsers.forEach(user => {
        const userCard = document.createElement('div');
        userCard.className = 'user-card';
        userCard.innerHTML = `
            <div class="user-card-avatar">${user.avatar || user.name.charAt(0).toUpperCase()}</div>
            <div class="user-card-info">
                <div class="user-card-name">${user.name}</div>
                <div class="user-card-status">
                    <span style="color: #00d26a;">‚óè –û–Ω–ª–∞–π–Ω</span>
                </div>
            </div>
            <div class="user-card-call">üìû</div>
        `;
        
        userCard.addEventListener('click', () => startCall(user));
        elements.usersList.appendChild(userCard);
    });
}

// === WebRTC –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ ===

async function startCall(targetUser) {
    if (!targetUser) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–≤–æ–Ω–∫–∞', 'error');
        return;
    }
    
    if (app.isInCall) {
        showNotification('–í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ', 'warning');
        return;
    }
    
    console.log(`üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å ${targetUser.name}`);
    
    app.currentCall = targetUser;
    app.isInCall = true;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
        app.localStream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: true
        });
        
        elements.localVideo.srcObject = app.localStream;
        elements.calleeName.textContent = targetUser.name;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–≤–æ–Ω–∫–∞
        showScreen('video');
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        createPeerConnection();
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await app.peerConnection.createOffer();
        await app.peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ
        sendWebSocketMessage({
            type: 'call-offer',
            offer: offer,
            to: targetUser.id,
            from: app.currentUser
        });
        
        showNotification(`–ó–≤–æ–Ω–∏–º ${targetUser.name}...`, 'info');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
        app.isInCall = false;
    }
}

function createPeerConnection() {
    const configuration = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            {
                urls: 'turn:94.198.218.189:3478',
                username: 'webrtc',
                credential: 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN'
            }
        ]
    };
    
    app.peerConnection = new RTCPeerConnection(configuration);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (app.localStream) {
        app.localStream.getTracks().forEach(track => {
            app.peerConnection.addTrack(track, app.localStream);
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    app.peerConnection.ontrack = (event) => {
        console.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        elements.remoteVideo.srcObject = event.streams[0];
        app.remoteStream = event.streams[0];
        startCallTimer();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    app.peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            sendWebSocketMessage({
                type: 'webrtc-ice',
                candidate: event.candidate,
                to: app.currentCall?.id
            });
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    app.peerConnection.onconnectionstatechange = () => {
        console.log('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', app.peerConnection.connectionState);
        
        if (app.peerConnection.connectionState === 'disconnected' || 
            app.peerConnection.connectionState === 'failed') {
            endCall();
        }
    };
}

function handleIncomingCall(data) {
    if (app.isInCall) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –µ—Å–ª–∏ —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ
        sendWebSocketMessage({
            type: 'call-rejected',
            to: data.from.id
        });
        return;
    }
    
    app.currentCall = data.from;
    showIncomingCall(data.from.name);
}

async function acceptIncomingCall() {
    console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫');
    hideIncomingCall();
    
    app.isInCall = true;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞
        app.localStream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: true
        });
        
        elements.localVideo.srcObject = app.localStream;
        elements.calleeName.textContent = app.currentCall.name;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–≤–æ–Ω–∫–∞
        showScreen('video');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        sendWebSocketMessage({
            type: 'call-accepted',
            to: app.currentCall.id
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–≤–æ–Ω–∫–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
        rejectIncomingCall();
    }
}

function rejectIncomingCall() {
    console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫');
    hideIncomingCall();
    
    if (app.currentCall) {
        sendWebSocketMessage({
            type: 'call-rejected',
            to: app.currentCall.id
        });
        app.currentCall = null;
    }
}

async function handleWebRTCOffer(data) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω WebRTC offer');
    
    if (!app.isInCall) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    createPeerConnection();
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await app.peerConnection.setRemoteDescription(data.offer);
        
        // –°–æ–∑–¥–∞–µ–º answer
        const answer = await app.peerConnection.createAnswer();
        await app.peerConnection.setLocalDescription(answer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer
        sendWebSocketMessage({
            type: 'webrtc-answer',
            answer: answer,
            to: app.currentCall.id
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ offer:', error);
    }
}

async function handleWebRTCAnswer(data) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω WebRTC answer');
    
    try {
        await app.peerConnection.setRemoteDescription(data.answer);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer:', error);
    }
}

async function handleWebRTCIce(data) {
    console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
    
    if (app.peerConnection) {
        try {
            await app.peerConnection.addIceCandidate(data.candidate);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
        }
    }
}

function endCall() {
    console.log('üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    stopCallTimer();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (app.localStream) {
        app.localStream.getTracks().forEach(track => track.stop());
        app.localStream = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (app.peerConnection) {
        app.peerConnection.close();
        app.peerConnection = null;
    }
    
    // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    elements.localVideo.srcObject = null;
    elements.remoteVideo.srcObject = null;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if (app.currentCall) {
        sendWebSocketMessage({
            type: 'call-ended',
            to: app.currentCall.id
        });
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    app.isInCall = false;
    app.currentCall = null;
    app.remoteStream = null;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showScreen('main');
}

function handleCallEnded() {
    console.log('üìû –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫');
    showNotification('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
    endCall();
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ ===

function toggleMicrophone() {
    if (app.localStream) {
        const audioTrack = app.localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            elements.toggleMic.classList.toggle('muted', !audioTrack.enabled);
            console.log(`üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${audioTrack.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
        }
    }
}

function toggleCamera() {
    if (app.localStream) {
        const videoTrack = app.localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            elements.toggleCamera.classList.toggle('muted', !videoTrack.enabled);
            console.log(`üìπ –ö–∞–º–µ—Ä–∞: ${videoTrack.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
        }
    }
}

async function toggleScreenShare() {
    try {
        if (!app.isScreenSharing) {
            // –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
            const screenStream = await navigator.mediaDevices.getDisplayMedia({
                video: true,
                audio: false
            });
            
            const videoTrack = screenStream.getVideoTracks()[0];
            const sender = app.peerConnection.getSenders().find(
                s => s.track && s.track.kind === 'video'
            );
            
            if (sender) {
                sender.replaceTrack(videoTrack);
            }
            
            videoTrack.onended = () => {
                toggleScreenShare();
            };
            
            app.isScreenSharing = true;
            elements.toggleScreen.classList.add('active');
            console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–∞—Ç–∞');
            
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–º–µ—Ä–µ
            const videoTrack = app.localStream.getVideoTracks()[0];
            const sender = app.peerConnection.getSenders().find(
                s => s.track && s.track.kind === 'video'
            );
            
            if (sender && videoTrack) {
                sender.replaceTrack(videoTrack);
            }
            
            app.isScreenSharing = false;
            elements.toggleScreen.classList.remove('active');
            console.log('üìπ –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞–º–µ—Ä–µ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞', 'error');
    }
}

// === –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞ ===

function startCallTimer() {
    app.callStartTime = Date.now();
    app.callTimer = setInterval(updateCallDuration, 1000);
}

function stopCallTimer() {
    if (app.callTimer) {
        clearInterval(app.callTimer);
        app.callTimer = null;
    }
    app.callStartTime = null;
    elements.callDuration.textContent = '00:00';
}

function updateCallDuration() {
    if (!app.callStartTime) return;
    
    const duration = Math.floor((Date.now() - app.callStartTime) / 1000);
    const minutes = Math.floor(duration / 60);
    const seconds = duration % 60;
    
    elements.callDuration.textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===

function showNotification(message, type = 'info') {
    console.log(`üí¨ ${type.toUpperCase()}: ${message}`);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const colors = {
        success: '#00d26a',
        error: '#f5576c',
        warning: '#ffc107',
        info: '#667eea'
    };
    
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${colors[type] || colors.info};
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 10000;
        animation: slideIn 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===

// –í—Ö–æ–¥
elements.loginBtn.addEventListener('click', login);
elements.userName.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') elements.userPhone.focus();
});
elements.userPhone.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') login();
});

// –í—ã—Ö–æ–¥
elements.logoutBtn.addEventListener('click', logout);

// –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
elements.acceptCall.addEventListener('click', acceptIncomingCall);
elements.rejectCall.addEventListener('click', rejectIncomingCall);

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–º
elements.endCall.addEventListener('click', endCall);
elements.toggleMic.addEventListener('click', toggleMicrophone);
elements.toggleCamera.addEventListener('click', toggleCamera);
elements.toggleScreen.addEventListener('click', toggleScreenShare);

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

window.addEventListener('DOMContentLoaded', () => {
    console.log('üé• CosmosCall –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    `;
    document.head.appendChild(style);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const savedUser = localStorage.getItem('cosmosCallUser');
    if (savedUser) {
        try {
            app.currentUser = JSON.parse(savedUser);
            elements.currentUserName.textContent = app.currentUser.name;
            elements.userAvatar.textContent = app.currentUser.avatar;
            connectWebSocket();
            showScreen('main');
            console.log(`‚úÖ –ê–≤—Ç–æ–≤—Ö–æ–¥: ${app.currentUser.name}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞:', error);
            showScreen('login');
        }
    } else {
        showScreen('login');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (app.isInCall) {
        endCall();
    }
    if (app.socket) {
        sendWebSocketMessage({
            type: 'user-leaving',
            userId: app.currentUser?.id
        });
        app.socket.close();
    }
});

console.log('‚úÖ CosmosCall –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º!');