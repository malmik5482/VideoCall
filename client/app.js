// ---- VideoChat Pro: Ultimate Edition for Russian Networks ----
// Version: 5.0.0-ULTIMATE
// Optimized for 1Gbps connections with full error prevention

// ========== POLYFILLS AND COMPATIBILITY ==========
if (!navigator.mediaDevices) navigator.mediaDevices = {};
if (!navigator.mediaDevices.getUserMedia) {
  navigator.mediaDevices.getUserMedia = function (constraints) {
    const gum = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (!gum) return Promise.reject(new Error('getUserMedia not supported'));
    return new Promise((resolve, reject) => gum.call(navigator, constraints, resolve, reject));
  };
}

// ========== CONSTANTS AND CONFIGURATION ==========
const APP_VERSION = '5.0.0-ULTIMATE';
const TURN_SERVER_IP = '94.198.218.189';
const TURN_SERVER_PORT = 3478;
const TURN_USERNAME = 'webrtc';
const TURN_PASSWORD = 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN';

// Enhanced video constraints optimized for 1Gbps
const VIDEO_CONSTRAINTS = {
  ultra: { 
    width: { ideal: 3840, min: 1920 }, 
    height: { ideal: 2160, min: 1080 }, 
    frameRate: { ideal: 60, min: 30 },
    aspectRatio: { ideal: 16/9 }
  },
  hd: { 
    width: { ideal: 1920, min: 1280 }, 
    height: { ideal: 1080, min: 720 }, 
    frameRate: { ideal: 30, min: 24 },
    aspectRatio: { ideal: 16/9 }
  },
  sd: { 
    width: { ideal: 1280, min: 640 }, 
    height: { ideal: 720, min: 480 }, 
    frameRate: { ideal: 24, min: 20 },
    aspectRatio: { ideal: 16/9 }
  },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
  mobile_4g: { 
    width: { ideal: 960, min: 640 }, 
    height: { ideal: 540, min: 360 }, 
    frameRate: { ideal: 24, min: 20 },
    aspectRatio: { ideal: 16/9 }
  },
  mobile_3g: { 
    width: { ideal: 640, min: 480 }, 
    height: { ideal: 360, min: 240 }, 
    frameRate: { ideal: 20, min: 15 },
    aspectRatio: { ideal: 16/9 }
  },
  mobile_poor: { 
    width: { ideal: 480, min: 320 }, 
    height: { ideal: 270, min: 180 }, 
    frameRate: { ideal: 15, min: 12 },
    aspectRatio: { ideal: 16/9 }
  },
  mobile: { 
    width: { ideal: 640, min: 480 }, 
    height: { ideal: 480, min: 360 }, 
    frameRate: { ideal: 20, min: 15 }
  },
  minimal: { 
    width: { ideal: 320, min: 240 }, 
    height: { ideal: 180, min: 120 }, 
    frameRate: { ideal: 12, min: 8 }
  }
};

const AUDIO_CONSTRAINTS = {
  premium: { 
    echoCancellation: true, 
    noiseSuppression: true, 
    autoGainControl: true, 
    sampleRate: 48000,
    channelCount: 2,
    sampleSize: 16
  },
  standard: { 
    echoCancellation: true, 
    noiseSuppression: true, 
    autoGainControl: true, 
    sampleRate: 44100,
    channelCount: 1
  },
  minimal: { 
    echoCancellation: true, 
    noiseSuppression: true, 
    autoGainControl: true, 
    sampleRate: 16000,
    channelCount: 1
  }
};

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ç–µ–π
const BITRATE_PRESETS = {
  ultra: { video: 50000000, audio: 256000 }, // 50 Mbps video, 256 kbps audio - –¥–ª—è 1Gbps
  high: { video: 20000000, audio: 192000 },  // 20 Mbps video, 192 kbps audio - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ WiFi
  medium: { video: 8000000, audio: 128000 }, // 8 Mbps video, 128 kbps audio - –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ WiFi
  low: { video: 2000000, audio: 96000 },     // 2 Mbps video, 96 kbps audio - –¥–ª—è 4G
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
  mobile_4g: { video: 1200000, audio: 64000 },    // 1.2 Mbps –¥–ª—è 4G (–ú–¢–°/–ë–∏–ª–∞–π–Ω/–ú–µ–≥–∞—Ñ–æ–Ω)
  mobile_3g: { video: 600000, audio: 48000 },     // 600 kbps –¥–ª—è 3G
  mobile_poor: { video: 300000, audio: 32000 },   // 300 kbps –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ
  minimal: { video: 150000, audio: 24000 }        // 150 kbps –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–∏—Ö —Å–µ—Ç–µ–π
};

// ========== UTILITY FUNCTIONS ==========
function detectRussianEnvironment() {
  // Always return true since all users are from Russia
  return true;
}

function detectDeviceEnvironment() {
  const userAgent = navigator.userAgent || '';
  const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  const isTablet = /iPad|Android(?!.*Mobile)|tablet/i.test(userAgent);
  const isDesktop = !isMobile && !isTablet;
  
  let connectionType = 'unknown';
  let effectiveSpeed = 0;
  
  if ('connection' in navigator) {
    const conn = navigator.connection;
    effectiveSpeed = conn.downlink || 10;
    const effectiveType = conn.effectiveType || '4g';
    
    if (effectiveType === 'slow-2g' || effectiveSpeed < 0.25) connectionType = 'poor';
    else if (effectiveType === '2g' || effectiveSpeed < 0.5) connectionType = 'fair';
    else if (effectiveType === '3g' || effectiveSpeed < 2) connectionType = 'good';
    else if (effectiveType === '4g' || effectiveSpeed < 100) connectionType = 'excellent';
    else connectionType = 'ultra';
  } else {
    // Assume good connection if API not available
    connectionType = 'excellent';
    effectiveSpeed = 10;
  }

  return { isMobile, isTablet, isDesktop, connectionType, effectiveSpeed };
}

// ========== MAIN APPLICATION CLASS ==========
class VideoCallApp {
  constructor() {
    console.log(`üöÄ VideoChat Pro ${APP_VERSION} initializing...`);
    
    // Core WebRTC components
    this.ws = null;
    this.pc = null;
    this.localStream = null;
    this.remoteStream = null;
    this.dataChannel = null;
    
    // Call state
    this.role = null;
    this.currentRoom = null;
    this.callStartTime = null;
    
    // Configuration
    this.iceServers = [];
    this.deviceCache = { video: [], audio: [], audioOutput: [] };
    this.settings = {
      videoQuality: 'hd',
      audioQuality: 'premium',
      videoEnabled: true,
      audioEnabled: true,
      selectedVideoDevice: null,
      selectedAudioDevice: null,
      selectedAudioOutput: null
    };
    
    // UI state
    this.chatMessages = [];
    this.isScreenSharing = false;
    this.panels = { chat: false, settings: false, history: false };
    
    // Connection management
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 10;
    this.connectionIssues = 0;
    this.lastSuccessfulConnection = null;
    
    // Russian network optimization
    this.isRussianUser = true;
    this.turnForced = true;
    this.turnConfirmed = false;
    
    // Performance tracking
    this.lastFramesDecoded = 0;
    this.staleFrameCount = 0;
    
    // Intervals
    this.intervals = {
      callTimer: null,
      qualityMonitor: null,
      connectionMonitor: null,
      heartbeat: null
    };

    // Initialize
    this.init();
  }

  async init() {
    try {
      this.detectEnvironment();
      if (!this.initializeElements()) {
        throw new Error('Failed to initialize DOM elements');
      }
      this.attachEventListeners();
      await this.initializeApp();
    } catch (error) {
      console.error('Initialization error:', error);
      this.handleCriticalError(error);
    }
  }

  detectEnvironment() {
    this.isRussianUser = true; // All users are from Russia
    this.environment = detectDeviceEnvironment();
    this.turnForced = true; // Always use TURN for Russia
    
    // Auto-select quality based on connection
    if (this.environment.connectionType === 'ultra') {
      this.settings.videoQuality = 'ultra';
      this.settings.audioQuality = 'premium';
    } else if (this.environment.connectionType === 'excellent') {
      this.settings.videoQuality = 'hd';
      this.settings.audioQuality = 'premium';
    } else if (this.environment.connectionType === 'good') {
      this.settings.videoQuality = 'sd';
      this.settings.audioQuality = 'standard';
    } else {
      this.settings.videoQuality = 'mobile';
      this.settings.audioQuality = 'minimal';
    }
    
    console.log('üåç Environment:', this.environment);
  }

  initializeElements() {
    const elementIds = [
      'loadingScreen', 'app', 'joinScreen', 'callScreen',
      'roomInput', 'generateRoomBtn', 'previewVideo', 'joinBtn', 'toggleVideoBtn', 'toggleAudioBtn',
      'localVideo', 'remoteVideo', 'connectionIndicator',
      'videoToggle', 'audioToggle', 'screenShareToggle', 'chatToggle', 'hangupBtn', 'switchCameraBtn',
      'callDuration', 'roomCode', 'connectionStatus', 'remoteUserName',
      'chatPanel', 'settingsPanel', 'historyPanel',
      'settingsBtn', 'historyBtn', 'closeChatBtn', 'closeSettingsBtn', 'closeHistoryBtn',
      'chatMessages', 'chatInput', 'sendMessageBtn',
      'audioInputSelect', 'audioOutputSelect', 'videoInputSelect',
      'historyList', 'toastContainer'
    ];

    this.elements = {};
    for (const id of elementIds) {
      const element = document.getElementById(id);
      if (!element) {
        console.warn(`Element not found: ${id}`);
      }
      this.elements[id] = element;
    }
    
    return true;
  }

  attachEventListeners() {
    // Join screen
    this.safeAddEventListener(this.elements.generateRoomBtn, 'click', () => this.generateRoomCode());
    this.safeAddEventListener(this.elements.joinBtn, 'click', () => this.joinRoom());
    this.safeAddEventListener(this.elements.toggleVideoBtn, 'click', () => this.togglePreviewVideo());
    this.safeAddEventListener(this.elements.toggleAudioBtn, 'click', () => this.togglePreviewAudio());
    
    // Call controls
    this.safeAddEventListener(this.elements.videoToggle, 'click', () => this.toggleVideo());
    this.safeAddEventListener(this.elements.audioToggle, 'click', () => this.toggleAudio());
    this.safeAddEventListener(this.elements.screenShareToggle, 'click', () => this.toggleScreenShare());
    this.safeAddEventListener(this.elements.chatToggle, 'click', () => this.toggleChat());
    this.safeAddEventListener(this.elements.hangupBtn, 'click', () => this.hangup());
    this.safeAddEventListener(this.elements.switchCameraBtn, 'click', () => this.switchCamera());
    
    // Panels
    this.safeAddEventListener(this.elements.settingsBtn, 'click', () => this.openPanel('settings'));
    this.safeAddEventListener(this.elements.historyBtn, 'click', () => this.openPanel('history'));
    this.safeAddEventListener(this.elements.closeChatBtn, 'click', () => this.closePanel('chat'));
    this.safeAddEventListener(this.elements.closeSettingsBtn, 'click', () => this.closePanel('settings'));
    this.safeAddEventListener(this.elements.closeHistoryBtn, 'click', () => this.closePanel('history'));
    
    // Chat
    this.safeAddEventListener(this.elements.sendMessageBtn, 'click', () => this.sendChatMessage());
    this.safeAddEventListener(this.elements.chatInput, 'keypress', (e) => {
      if (e.key === 'Enter') this.sendChatMessage();
    });
    
    // Settings
    document.querySelectorAll('input[name="quality"]').forEach(radio => {
      this.safeAddEventListener(radio, 'change', (e) => this.changeVideoQuality(e.target.value));
    });
    
    this.safeAddEventListener(this.elements.audioInputSelect, 'change', (e) => this.changeAudioInput(e.target.value));
    this.safeAddEventListener(this.elements.audioOutputSelect, 'change', (e) => this.changeAudioOutput(e.target.value));
    this.safeAddEventListener(this.elements.videoInputSelect, 'change', (e) => this.changeVideoInput(e.target.value));
    
    // Room input enter key
    this.safeAddEventListener(this.elements.roomInput, 'keypress', (e) => {
      if (e.key === 'Enter') this.joinRoom();
    });
    
    // TURN diagnostics button
    this.safeAddEventListener(document.getElementById('runTurnDiagnosticsBtn'), 'click', () => {
      this.runTurnDiagnostics();
    });
    
    // Window events
    this.safeAddEventListener(window, 'beforeunload', () => this.cleanup());
    this.safeAddEventListener(window, 'online', () => this.handleOnline());
    this.safeAddEventListener(window, 'offline', () => this.handleOffline());
  }

  safeAddEventListener(element, event, handler) {
    if (element && typeof handler === 'function') {
      try {
        element.addEventListener(event, handler);
      } catch (error) {
        console.warn(`Failed to add ${event} listener:`, error);
      }
    }
  }

  async initializeApp() {
    try {
      await this.loadConfig();
      await this.enumerateDevices();
      this.startMonitoring();
      setTimeout(() => this.hideLoading(), 1000);
    } catch (error) {
      console.error('App initialization failed:', error);
      this.handleCriticalError(error);
    }
  }

  async loadConfig() {
    try {
      const response = await fetch('/config');
      if (!response.ok) throw new Error('Config fetch failed');
      const config = await response.json();
      
      this.iceServers = config.iceServers || [];
      console.log(`üì° Loaded ${this.iceServers.length} ICE servers`);
    } catch (error) {
      console.warn('Using fallback ICE config');
      this.iceServers = [{
        urls: [
          `turn:${TURN_SERVER_IP}:${TURN_SERVER_PORT}?transport=udp`,
          `turn:${TURN_SERVER_IP}:${TURN_SERVER_PORT}?transport=tcp`
        ],
        username: TURN_USERNAME,
        credential: TURN_PASSWORD
      }];
    }
  }

  async enumerateDevices() {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      
      this.deviceCache.video = devices.filter(d => d.kind === 'videoinput');
      this.deviceCache.audio = devices.filter(d => d.kind === 'audioinput');
      this.deviceCache.audioOutput = devices.filter(d => d.kind === 'audiooutput');
      
      this.populateDeviceSelects();
    } catch (error) {
      console.warn('Device enumeration failed:', error);
    }
  }

  populateDeviceSelects() {
    if (this.elements.videoInputSelect) {
      this.elements.videoInputSelect.innerHTML = '<option value="">–ê–≤—Ç–æ</option>';
      this.deviceCache.video.forEach((device, i) => {
        const option = document.createElement('option');
        option.value = device.deviceId;
        option.textContent = device.label || `–ö–∞–º–µ—Ä–∞ ${i + 1}`;
        this.elements.videoInputSelect.appendChild(option);
      });
    }

    if (this.elements.audioInputSelect) {
      this.elements.audioInputSelect.innerHTML = '<option value="">–ê–≤—Ç–æ</option>';
      this.deviceCache.audio.forEach((device, i) => {
        const option = document.createElement('option');
        option.value = device.deviceId;
        option.textContent = device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${i + 1}`;
        this.elements.audioInputSelect.appendChild(option);
      });
    }

    if (this.elements.audioOutputSelect) {
      this.elements.audioOutputSelect.innerHTML = '<option value="">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>';
      this.deviceCache.audioOutput.forEach((device, i) => {
        const option = document.createElement('option');
        option.value = device.deviceId;
        option.textContent = device.label || `–î–∏–Ω–∞–º–∏–∫–∏ ${i + 1}`;
        this.elements.audioOutputSelect.appendChild(option);
      });
    }
  }

  hideLoading() {
    if (this.elements.loadingScreen) {
      this.elements.loadingScreen.classList.add('hidden');
    }
    if (this.elements.app) {
      this.elements.app.classList.remove('hidden');
    }
    this.startPreviewMedia();
  }

  async startPreviewMedia() {
    try {
      const constraints = {
        video: VIDEO_CONSTRAINTS[this.settings.videoQuality] || VIDEO_CONSTRAINTS.hd,
        audio: AUDIO_CONSTRAINTS[this.settings.audioQuality] || AUDIO_CONSTRAINTS.standard
      };

      this.localStream = await navigator.mediaDevices.getUserMedia(constraints);
      
      if (this.elements.previewVideo) {
        this.elements.previewVideo.srcObject = this.localStream;
      }
      
      this.updateConnectionStatus('ready', '–ì–æ—Ç–æ–≤');
      console.log('‚úÖ Preview started');
    } catch (error) {
      console.error('Media error:', error);
      this.handleMediaError(error);
    }
  }

  handleMediaError(error) {
    let message = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É';
    
    if (error.name === 'NotAllowedError') {
      message = '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É';
    } else if (error.name === 'NotFoundError') {
      message = '–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else if (error.name === 'NotReadableError') {
      message = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
    }
    
    this.showToast('error', message);
    this.updateConnectionStatus('error', '–û—à–∏–±–∫–∞');
  }

  togglePreviewVideo() {
    if (this.localStream) {
      const videoTrack = this.localStream.getVideoTracks()[0];
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        if (this.elements.toggleVideoBtn) {
          this.elements.toggleVideoBtn.classList.toggle('active');
        }
      }
    }
  }

  togglePreviewAudio() {
    if (this.localStream) {
      const audioTrack = this.localStream.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        if (this.elements.toggleAudioBtn) {
          this.elements.toggleAudioBtn.classList.toggle('active');
        }
      }
    }
  }

  generateRoomCode() {
    const code = Math.random().toString(36).substring(2, 8).toUpperCase();
    if (this.elements.roomInput) {
      this.elements.roomInput.value = code;
    }
    console.log(`Generated room: ${code}`);
  }

  async joinRoom() {
    const room = this.elements.roomInput?.value?.trim()?.toUpperCase();
    if (!room) {
      this.showToast('warning', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    try {
      if (this.elements.joinBtn) this.elements.joinBtn.disabled = true;
      
      this.currentRoom = room;
      if (this.elements.roomCode) {
        this.elements.roomCode.textContent = `–ö–æ–º–Ω–∞—Ç–∞: ${room}`;
      }
      
      if (!this.localStream) {
        await this.startPreviewMedia();
      }
      
      await this.createPeerConnection();
      await this.connectWebSocket(room);
      
      // Switch screens
      if (this.elements.joinScreen) this.elements.joinScreen.style.display = 'none';
      if (this.elements.callScreen) this.elements.callScreen.classList.remove('hidden');
      if (this.elements.localVideo) this.elements.localVideo.srcObject = this.localStream;
      
      this.showToast('info', `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${room}...`);
    } catch (error) {
      console.error('Join error:', error);
      this.showToast('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      if (this.elements.joinBtn) this.elements.joinBtn.disabled = false;
    }
  }

  async createPeerConnection() {
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    let iceTransportPolicy = 'all'; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ø—ã—Ç–∫–∏ P2P
    
    // –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –†–æ—Å—Å–∏–∏ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º TURN
    const isMobileNetwork = this.environment.isMobile || 
                           this.environment.connectionType === 'poor' || 
                           this.environment.connectionType === 'fair' ||
                           this.detectMobileConnection();
    
    if (isMobileNetwork || this.isRussianUser) {
      iceTransportPolicy = 'relay';
      console.log('üîÑ Forcing TURN for Russian mobile networks');
      this.showToast('info', 'üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º TURN –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏');
    }
    
    const config = {
      iceServers: this.iceServers,
      iceCandidatePoolSize: 30,
      rtcpMuxPolicy: 'require',
      bundlePolicy: 'max-bundle',
      iceTransportPolicy: iceTransportPolicy,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
      iceGatheringPolicy: 'all',
      connectionTimeout: 15000
    };
    
    this.pc = new RTCPeerConnection(config);
    
    // Add tracks
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => {
        this.pc.addTrack(track, this.localStream);
      });
    }
    
    // Create data channel
    this.dataChannel = this.pc.createDataChannel('chat', {
      ordered: true,
      maxRetransmits: 3
    });
    
    this.setupPeerConnectionHandlers();
    this.optimizePeerConnection();
    
    console.log('‚úÖ Peer connection created');
  }

  setupPeerConnectionHandlers() {
    this.pc.ontrack = (event) => {
      console.log('üì∫ Remote track received');
      this.remoteStream = event.streams[0];
      if (this.elements.remoteVideo) {
        this.elements.remoteVideo.srcObject = this.remoteStream;
      }
      this.updateConnectionStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω');
      this.startCallTimer();
      this.showToast('success', '‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    };

    this.pc.onicecandidate = (event) => {
      if (event.candidate) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ TURN
        this.confirmTurnConnection(event.candidate);
        
        this.sendSignalMessage({
          type: 'candidate',
          candidate: event.candidate
        });
      }
    };

    this.pc.onconnectionstatechange = () => {
      const state = this.pc.connectionState;
      this.handleConnectionStateChange(state);
    };

    this.pc.oniceconnectionstatechange = () => {
      const state = this.pc.iceConnectionState;
      console.log(`ICE state: ${state}`);
    };

    this.pc.ondatachannel = (event) => {
      const channel = event.channel;
      channel.onmessage = (e) => {
        try {
          const data = JSON.parse(e.data);
          if (data.type === 'chat') {
            this.receiveChatMessage(data.text, false);
          }
        } catch (err) {
          console.warn('Data channel message error:', err);
        }
      };
    };
  }

  optimizePeerConnection() {
    if (!this.pc) return;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    let bitrateKey = 'medium'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (this.detectMobileConnection()) {
      // –ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
      if (this.environment.connectionType === 'excellent' && this.environment.effectiveSpeed > 10) {
        bitrateKey = 'mobile_4g';
      } else if (this.environment.connectionType === 'good') {
        bitrateKey = 'mobile_3g';
      } else {
        bitrateKey = 'mobile_poor';
      }
      console.log(`üì± Mobile network detected, using ${bitrateKey} preset`);
    } else {
      // WiFi/–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
      bitrateKey = this.environment.connectionType === 'ultra' ? 'ultra' :
                   this.environment.connectionType === 'excellent' ? 'high' :
                   this.environment.connectionType === 'good' ? 'medium' :
                   this.environment.connectionType === 'fair' ? 'low' : 'minimal';
    }
    
    const bitrates = BITRATE_PRESETS[bitrateKey];
    
    this.pc.getSenders().forEach(sender => {
      if (!sender.track) return;
      
      const params = sender.getParameters();
      if (!params.encodings) params.encodings = [{}];
      
      if (sender.track.kind === 'video') {
        params.encodings[0].maxBitrate = bitrates.video;
        params.encodings[0].maxFramerate = 30;
      } else if (sender.track.kind === 'audio') {
        params.encodings[0].maxBitrate = bitrates.audio;
      }
      
      sender.setParameters(params).catch(e => console.warn('Parameter setting failed:', e));
    });
    
    console.log(`‚öôÔ∏è Optimized: ${bitrates.video / 1000000} Mbps video, ${bitrates.audio / 1000} kbps audio`);
  }

  async connectWebSocket(room) {
    const protocol = location.protocol === 'https:' ? 'wss' : 'ws';
    const wsUrl = `${protocol}://${location.host}/ws`;
    
    this.ws = new WebSocket(wsUrl);
    
    this.ws.onopen = () => {
      console.log('‚úÖ WebSocket connected');
      this.sendSignalMessage({
        type: 'join',
        room
      });
    };
    
    this.ws.onmessage = async (event) => {
      try {
        const message = JSON.parse(event.data);
        await this.handleSignalMessage(message);
      } catch (error) {
        console.error('Message handling error:', error);
      }
    };
    
    this.ws.onerror = (error) => {
      console.error('WebSocket error:', error);
      this.showToast('error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    };
    
    this.ws.onclose = () => {
      console.log('WebSocket closed');
      if (this.currentRoom) {
        setTimeout(() => this.reconnectWebSocket(), 2000);
      }
    };
  }

  async reconnectWebSocket() {
    if (this.currentRoom && (!this.ws || this.ws.readyState !== WebSocket.OPEN)) {
      console.log('Reconnecting WebSocket...');
      await this.connectWebSocket(this.currentRoom);
    }
  }

  async handleSignalMessage(message) {
    switch (message.type) {
      case 'role':
        this.role = message.role;
        console.log(`Assigned role: ${this.role}`);
        break;
        
      case 'ready':
        console.log('Room ready');
        if (this.role === 'caller') {
          await this.createOffer();
        }
        break;
        
      case 'description':
        await this.handleDescription(message.sdp);
        break;
        
      case 'candidate':
        await this.pc.addIceCandidate(message.candidate);
        break;
        
      case 'chat':
        this.receiveChatMessage(message.text, false);
        break;
        
      case 'peer-left':
        this.handlePeerLeft();
        break;
        
      case 'full':
        this.showToast('error', '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        this.hangup();
        break;
    }
  }

  async createOffer() {
    const offer = await this.pc.createOffer();
    await this.pc.setLocalDescription(offer);
    this.sendSignalMessage({
      type: 'description',
      sdp: this.pc.localDescription
    });
    console.log('üìû Offer created');
  }

  async handleDescription(sdp) {
    if (sdp.type === 'offer') {
      await this.pc.setRemoteDescription(sdp);
      const answer = await this.pc.createAnswer();
      await this.pc.setLocalDescription(answer);
      this.sendSignalMessage({
        type: 'description',
        sdp: this.pc.localDescription
      });
      console.log('üìû Answer created');
    } else if (sdp.type === 'answer') {
      await this.pc.setRemoteDescription(sdp);
      console.log('üìû Answer received');
    }
  }

  sendSignalMessage(message) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    }
  }

  handleConnectionStateChange(state) {
    if (state === 'failed') {
      console.error('Connection failed');
      this.showToast('error', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        this.reconnectAttempts++;
        setTimeout(() => this.reconnect(), 2000);
      }
    } else if (state === 'connected') {
      this.reconnectAttempts = 0;
      this.updateConnectionIndicator();
    }
  }

  async reconnect() {
    console.log(`Reconnection attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
    if (this.pc) {
      this.pc.close();
    }
    await this.createPeerConnection();
    if (this.role === 'caller') {
      await this.createOffer();
    }
  }

  handlePeerLeft() {
    console.log('Peer left');
    this.showToast('info', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∑–≤–æ–Ω–æ–∫');
    if (this.elements.remoteVideo) {
      this.elements.remoteVideo.srcObject = null;
    }
  }

  toggleVideo() {
    this.settings.videoEnabled = !this.settings.videoEnabled;
    if (this.localStream) {
      const track = this.localStream.getVideoTracks()[0];
      if (track) track.enabled = this.settings.videoEnabled;
    }
    this.updateVideoButton();
  }

  toggleAudio() {
    this.settings.audioEnabled = !this.settings.audioEnabled;
    if (this.localStream) {
      const track = this.localStream.getAudioTracks()[0];
      if (track) track.enabled = this.settings.audioEnabled;
    }
    this.updateAudioButton();
  }

  async toggleScreenShare() {
    try {
      if (!this.isScreenSharing) {
        const stream = await navigator.mediaDevices.getDisplayMedia({
          video: { width: 1920, height: 1080 },
          audio: false
        });
        
        const videoTrack = stream.getVideoTracks()[0];
        const sender = this.pc.getSenders().find(s => s.track?.kind === 'video');
        
        if (sender) {
          await sender.replaceTrack(videoTrack);
        }
        
        videoTrack.onended = () => {
          this.stopScreenShare();
        };
        
        this.isScreenSharing = true;
        if (this.elements.screenShareToggle) {
          this.elements.screenShareToggle.classList.add('active');
        }
        this.showToast('success', '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞');
      } else {
        this.stopScreenShare();
      }
    } catch (error) {
      console.error('Screen share error:', error);
      this.showToast('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞');
    }
  }

  async stopScreenShare() {
    if (this.localStream) {
      const videoTrack = this.localStream.getVideoTracks()[0];
      const sender = this.pc.getSenders().find(s => s.track?.kind === 'video');
      
      if (sender && videoTrack) {
        await sender.replaceTrack(videoTrack);
      }
    }
    
    this.isScreenSharing = false;
    if (this.elements.screenShareToggle) {
      this.elements.screenShareToggle.classList.remove('active');
    }
    this.showToast('info', '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
  }

  async switchCamera() {
    if (!this.environment.isMobile) {
      this.showToast('info', '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö');
      return;
    }
    
    try {
      const constraints = {
        video: { facingMode: this.currentFacingMode === 'user' ? 'environment' : 'user' },
        audio: false
      };
      
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      const videoTrack = stream.getVideoTracks()[0];
      
      const sender = this.pc?.getSenders()?.find(s => s.track?.kind === 'video');
      if (sender) {
        await sender.replaceTrack(videoTrack);
      }
      
      // Update local stream
      if (this.localStream) {
        const oldTrack = this.localStream.getVideoTracks()[0];
        if (oldTrack) oldTrack.stop();
        this.localStream.removeTrack(oldTrack);
        this.localStream.addTrack(videoTrack);
      }
      
      this.currentFacingMode = this.currentFacingMode === 'user' ? 'environment' : 'user';
      this.showToast('success', '–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
      console.error('Switch camera error:', error);
      this.showToast('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É');
    }
  }

  hangup() {
    console.log('Hanging up...');
    
    // Stop all tracks
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
    }
    
    // Close connections
    if (this.pc) {
      this.pc.close();
      this.pc = null;
    }
    
    if (this.ws) {
      this.sendSignalMessage({ type: 'leave' });
      this.ws.close();
      this.ws = null;
    }
    
    // Clear intervals
    Object.values(this.intervals).forEach(interval => {
      if (interval) clearInterval(interval);
    });
    
    // Reset state
    this.currentRoom = null;
    this.role = null;
    
    // Switch screens
    if (this.elements.callScreen) this.elements.callScreen.classList.add('hidden');
    if (this.elements.joinScreen) this.elements.joinScreen.style.display = '';
    if (this.elements.joinBtn) this.elements.joinBtn.disabled = false;
    
    this.showToast('info', '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  toggleChat() {
    const isOpen = this.elements.chatPanel?.classList.contains('open');
    if (isOpen) {
      this.closePanel('chat');
    } else {
      this.openPanel('chat');
    }
  }

  sendChatMessage() {
    const input = this.elements.chatInput;
    if (!input) return;
    
    const text = input.value.trim();
    if (!text) return;
    
    this.sendSignalMessage({ type: 'chat', text });
    
    if (this.dataChannel && this.dataChannel.readyState === 'open') {
      this.dataChannel.send(JSON.stringify({ type: 'chat', text }));
    }
    
    this.receiveChatMessage(text, true);
    input.value = '';
  }

  receiveChatMessage(text, isOwn) {
    const container = this.elements.chatMessages;
    if (!container) return;
    
    const message = document.createElement('div');
    message.className = `chat-message ${isOwn ? 'own' : 'other'}`;
    message.textContent = text;
    
    container.appendChild(message);
    container.scrollTop = container.scrollHeight;
    
    if (!isOwn && !this.elements.chatPanel?.classList.contains('open')) {
      this.showToast('info', `üí¨ ${text.substring(0, 30)}...`);
    }
  }

  openPanel(name) {
    ['chat', 'settings', 'history'].forEach(panel => {
      const el = this.elements[`${panel}Panel`];
      if (el) {
        if (panel === name) {
          el.classList.add('open');
        } else {
          el.classList.remove('open');
        }
      }
    });
    
    if (name === 'history') {
      this.loadHistory();
    }
  }

  closePanel(name) {
    const panel = this.elements[`${name}Panel`];
    if (panel) {
      panel.classList.remove('open');
    }
  }

  changeVideoQuality(quality) {
    this.settings.videoQuality = quality;
    this.showToast('info', `–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: ${quality}`);
    // Apply quality change if in call
    if (this.pc) {
      this.optimizePeerConnection();
    }
  }

  changeAudioInput(deviceId) {
    this.settings.selectedAudioDevice = deviceId;
  }

  changeVideoInput(deviceId) {
    this.settings.selectedVideoDevice = deviceId;
  }

  changeAudioOutput(deviceId) {
    this.settings.selectedAudioOutput = deviceId;
    if (this.elements.remoteVideo && this.elements.remoteVideo.setSinkId) {
      this.elements.remoteVideo.setSinkId(deviceId).catch(console.error);
    }
  }

  async loadHistory() {
    try {
      const response = await fetch('/history');
      const data = await response.json();
      
      const container = this.elements.historyList;
      if (!container) return;
      
      container.innerHTML = '';
      
      if (!data.data || data.data.length === 0) {
        container.innerHTML = '<p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
        return;
      }
      
      data.data.forEach(item => {
        const el = document.createElement('div');
        el.className = 'history-item';
        const duration = item.durationSec ? 
          `${Math.floor(item.durationSec / 60)}:${(item.durationSec % 60).toString().padStart(2, '0')}` : 
          '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
        el.innerHTML = `
          <h5>–ö–æ–º–Ω–∞—Ç–∞: ${item.room}</h5>
          <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}</p>
          <p>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${item.participantsMax}</p>
        `;
        container.appendChild(el);
      });
    } catch (error) {
      console.error('History loading error:', error);
    }
  }

  updateVideoButton() {
    if (this.elements.videoToggle) {
      this.elements.videoToggle.className = this.settings.videoEnabled ? 
        'control-btn video-on' : 'control-btn video-off';
    }
  }

  updateAudioButton() {
    if (this.elements.audioToggle) {
      this.elements.audioToggle.className = this.settings.audioEnabled ? 
        'control-btn audio-on' : 'control-btn audio-off';
    }
  }

  updateConnectionStatus(status, text) {
    const statusEl = this.elements.connectionStatus;
    if (!statusEl) return;
    
    const dot = statusEl.querySelector('.status-dot');
    const span = statusEl.querySelector('span');
    
    if (dot) dot.className = `status-dot ${status}`;
    if (span) span.textContent = text;
  }

  updateConnectionIndicator() {
    const indicator = this.elements.connectionIndicator;
    if (!indicator || !this.pc) return;
    
    const bars = indicator.querySelectorAll('.bar');
    const state = this.pc.connectionState;
    
    bars.forEach((bar, i) => {
      bar.style.opacity = state === 'connected' ? '1' : '0.3';
      bar.style.backgroundColor = state === 'connected' ? '#4CAF50' : '#f44336';
    });
  }

  startCallTimer() {
    this.callStartTime = Date.now();
    
    if (this.intervals.callTimer) {
      clearInterval(this.intervals.callTimer);
    }
    
    this.intervals.callTimer = setInterval(() => {
      const elapsed = Date.now() - this.callStartTime;
      const minutes = Math.floor(elapsed / 60000);
      const seconds = Math.floor((elapsed % 60000) / 1000);
      
      if (this.elements.callDuration) {
        this.elements.callDuration.textContent = 
          `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }
    }, 1000);
  }

  showToast(type, message, duration = 3000) {
    const container = this.elements.toastContainer;
    if (!container) return;
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    
    container.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('removing');
      setTimeout(() => {
        if (toast.parentNode) {
          container.removeChild(toast);
        }
      }, 300);
    }, duration);
  }

  startMonitoring() {
    // Connection monitoring
    this.intervals.connectionMonitor = setInterval(() => {
      if (this.pc && this.pc.connectionState === 'connected') {
        this.updateConnectionIndicator();
      }
    }, 5000);
    
    // Heartbeat
    this.intervals.heartbeat = setInterval(() => {
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.sendSignalMessage({ type: 'ping' });
      }
    }, 30000);
  }

  cleanup() {
    console.log('Cleaning up...');
    this.hangup();
  }

  handleOnline() {
    console.log('Connection restored');
    this.showToast('success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    if (this.currentRoom && !this.ws) {
      this.reconnectWebSocket();
    }
  }

  handleOffline() {
    console.log('Connection lost');
    this.showToast('error', '–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
  }

  handleCriticalError(error) {
    console.error('CRITICAL ERROR:', error);
    this.showToast('error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 10000);
  }

  // ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–û–°–°–ò–ô–°–ö–ò–• –£–°–õ–û–í–ò–ô ==========
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  async performNetworkDiagnostics() {
    const startTime = Date.now();
    const diagnostics = {
      connectionSpeed: 0,
      rtt: 0,
      packetLoss: 0,
      networkType: 'unknown'
    };

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ç–∏
      if ('connection' in navigator) {
        const conn = navigator.connection;
        diagnostics.connectionSpeed = conn.downlink || 10;
        diagnostics.networkType = conn.effectiveType || '4g';
        
        if (conn.type) {
          if (conn.type.includes('cellular')) diagnostics.networkType = 'mobile';
          else if (conn.type.includes('wifi')) diagnostics.networkType = 'wifi';
        }
      }

      // –ò–∑–º–µ—Ä—è–µ–º RTT —á–µ—Ä–µ–∑ ping –∫ —Å–µ—Ä–≤–µ—Ä—É
      try {
        const pingStart = Date.now();
        await fetch('/healthz', { method: 'HEAD' });
        diagnostics.rtt = Date.now() - pingStart;
      } catch (error) {
        diagnostics.rtt = 999;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebRTC –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (this.pc && this.pc.getStats) {
        const stats = await this.pc.getStats();
        let packetsLost = 0, packetsReceived = 0;

        stats.forEach(report => {
          if (report.type === 'inbound-rtp') {
            packetsLost += report.packetsLost || 0;
            packetsReceived += report.packetsReceived || 0;
          }
        });

        if (packetsReceived > 0) {
          diagnostics.packetLoss = (packetsLost / (packetsLost + packetsReceived)) * 100;
        }
      }

      console.log('üîç Network diagnostics:', diagnostics);
      return diagnostics;
    } catch (error) {
      console.error('Diagnostics error:', error);
      return diagnostics;
    }
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π —Å–µ—Ç–∏
  async adaptQualityToNetwork() {
    if (!this.pc) return;

    const diagnostics = await this.performNetworkDiagnostics();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    let newQuality = 'hd';
    let shouldForceTurn = false;

    if (diagnostics.rtt > 300 || diagnostics.packetLoss > 10) {
      newQuality = 'minimal';
      shouldForceTurn = true;
      this.showToast('warning', '‚ö†Ô∏è –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ç–∏, —Å–Ω–∏–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } else if (diagnostics.rtt > 150 || diagnostics.packetLoss > 5) {
      newQuality = 'mobile';
      shouldForceTurn = true;
    } else if (diagnostics.connectionSpeed > 50 && diagnostics.rtt < 50) {
      newQuality = 'ultra';
    } else if (diagnostics.networkType === 'mobile') {
      newQuality = 'sd';
      shouldForceTurn = true;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (newQuality !== this.settings.videoQuality) {
      this.settings.videoQuality = newQuality;
      this.optimizePeerConnection();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      try {
        const response = await fetch('/optimize-quality', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(diagnostics)
        });
        
        if (response.ok) {
          const optimizedSettings = await response.json();
          console.log('‚úÖ Server optimization applied:', optimizedSettings);
        }
      } catch (error) {
        console.warn('Quality optimization request failed:', error);
      }
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å TURN –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (shouldForceTurn && !this.turnForced) {
      console.log('üîÑ Switching to TURN due to poor connection quality');
      await this.switchToTurnConnection();
    }

    return diagnostics;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ TURN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  async switchToTurnConnection() {
    if (!this.pc) return;

    this.turnForced = true;
    this.showToast('info', 'üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ TURN —Å–µ—Ä–≤–µ—Ä...');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TURN
    const currentConfig = this.pc.getConfiguration();
    currentConfig.iceTransportPolicy = 'relay';
    
    try {
      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º peer connection —Å TURN-only –ø–æ–ª–∏—Ç–∏–∫–æ–π
      const oldPc = this.pc;
      await this.createPeerConnection();
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏
      if (this.localStream) {
        this.localStream.getTracks().forEach(track => {
          this.pc.addTrack(track, this.localStream);
        });
      }

      // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (this.role === 'caller') {
        await this.makeCall();
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (oldPc) {
        oldPc.close();
      }

      console.log('‚úÖ Successfully switched to TURN connection');
    } catch (error) {
      console.error('TURN switch failed:', error);
      this.showToast('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ TURN —Å–µ—Ä–≤–µ—Ä');
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  startQualityMonitoring() {
    if (this.intervals.qualityMonitor) {
      clearInterval(this.intervals.qualityMonitor);
    }

    this.intervals.qualityMonitor = setInterval(async () => {
      if (this.pc && this.pc.connectionState === 'connected') {
        try {
          await this.adaptQualityToNetwork();
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
          if (this.isRussianUser && !this.turnConfirmed && this.connectionIssues > 3) {
            console.log('üá∑üá∫ Multiple connection issues detected, forcing TURN');
            await this.switchToTurnConnection();
            this.connectionIssues = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
          }
        } catch (error) {
          console.error('Quality monitoring error:', error);
          this.connectionIssues++;
        }
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TURN
  confirmTurnConnection(candidate) {
    if (candidate && candidate.candidate && candidate.candidate.includes('relay')) {
      this.turnConfirmed = true;
      console.log('‚úÖ TURN connection confirmed');
      this.showToast('success', '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TURN —Å–µ—Ä–≤–µ—Ä');
    }
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  handleConnectionStateChange(state) {
    console.log(`üîå Connection state: ${state}`);
    
    switch (state) {
      case 'connected':
        this.updateConnectionStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω');
        this.connectionIssues = 0;
        this.lastSuccessfulConnection = Date.now();
        this.startQualityMonitoring();
        break;
        
      case 'connecting':
        this.updateConnectionStatus('connecting', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        break;
        
      case 'disconnected':
        this.updateConnectionStatus('error', '–û—Ç–∫–ª—é—á–µ–Ω');
        this.connectionIssues++;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TURN –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        this.autoTurnDiagnostics();
        
        // –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ
        if (this.isRussianUser && this.connectionIssues < this.maxReconnectAttempts) {
          setTimeout(() => this.attemptReconnection(), 2000);
        }
        break;
        
      case 'failed':
        this.updateConnectionStatus('error', '–û—à–∏–±–∫–∞');
        this.connectionIssues++;
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TURN –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (this.connectionIssues >= 2) {
          this.autoTurnDiagnostics();
        }
        
        if (this.connectionIssues >= 3 && !this.turnForced) {
          this.switchToTurnConnection();
        }
        break;
        
      case 'closed':
        this.updateConnectionStatus('error', '–ó–∞–∫—Ä—ã—Ç');
        if (this.intervals.qualityMonitor) {
          clearInterval(this.intervals.qualityMonitor);
        }
        break;
    }
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ç–µ–π
  async attemptReconnection() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      this.showToast('error', '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    this.reconnectAttempts++;
    console.log(`üîÑ Reconnection attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
    
    try {
      if (this.ws && this.ws.readyState !== WebSocket.OPEN) {
        await this.connectWebSocket(this.currentRoom);
      }
      
      if (this.pc && this.pc.connectionState === 'failed') {
        await this.createPeerConnection();
        if (this.role === 'caller') {
          await this.makeCall();
        }
      }
    } catch (error) {
      console.error('Reconnection failed:', error);
      setTimeout(() => this.attemptReconnection(), 5000);
    }
  }

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async reconnectWebSocket() {
    if (this.currentRoom) {
      try {
        await this.connectWebSocket(this.currentRoom);
        this.showToast('success', '‚úÖ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
      } catch (error) {
        console.error('WebSocket reconnection failed:', error);
        this.showToast('error', '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    }
  }

  // –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
  detectMobileConnection() {
    if ('connection' in navigator) {
      const conn = navigator.connection;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (conn.type === 'cellular') return true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–ø (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –º–æ–±–∏–ª—å–Ω—ã–µ —Å–µ—Ç–∏)
      const mobileTypes = ['slow-2g', '2g', '3g'];
      if (mobileTypes.includes(conn.effectiveType)) return true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ = –≤–µ—Ä–æ—è—Ç–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ)
      if (conn.downlink && conn.downlink < 5) return true;
      
      // –í—ã—Å–æ–∫–∏–π RTT —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å
      if (conn.rtt && conn.rtt > 200) return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const mobileUA = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
    if (mobileUA.test(navigator.userAgent)) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (window.screen.width < 768) return true;
    
    return false;
  }

  // ========== TURN SERVER DIAGNOSTICS INTEGRATION ==========
  
  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ TURN —Å–µ—Ä–≤–µ—Ä–∞
  async runTurnDiagnostics() {
    if (!window.TurnDiagnostics) {
      console.error('TurnDiagnostics not loaded');
      return null;
    }

    this.showToast('info', 'üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É TURN —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
      const diagnostics = new window.TurnDiagnostics();
      const results = await diagnostics.performCompleteTurnDiagnostics();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const report = diagnostics.generateDiagnosticReport(results);
      
      try {
        const response = await fetch('/turn-diagnostics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(report)
        });
        
        if (response.ok) {
          const serverAnalysis = await response.json();
          console.log('üìä Server analysis:', serverAnalysis);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          this.displayTurnDiagnosticsResults(results, serverAnalysis);
        }
      } catch (error) {
        console.warn('Failed to send diagnostics to server:', error);
      }
      
      return results;
      
    } catch (error) {
      console.error('TURN diagnostics failed:', error);
      this.showToast('error', '‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TURN –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + error.message);
      return null;
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ TURN
  displayTurnDiagnosticsResults(results, serverAnalysis) {
    const grade = results.analysis?.grade || 'F';
    const score = results.analysis?.overallScore || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—Ü–µ–Ω–∫–µ
    let statusColor, statusMessage, statusIcon;
    
    if (grade === 'A' || grade === 'B') {
      statusColor = 'success';
      statusMessage = '‚úÖ TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ';
      statusIcon = '‚úÖ';
    } else if (grade === 'C') {
      statusColor = 'warning';
      statusMessage = '‚ö†Ô∏è TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏';
      statusIcon = '‚ö†Ô∏è';
    } else {
      statusColor = 'error';
      statusMessage = '‚ùå TURN —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ';
      statusIcon = '‚ùå';
    }
    
    this.showToast(statusColor, `${statusIcon} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TURN: ${grade} (${score}/100)`, 8000);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (results.analysis?.issues && results.analysis.issues.length > 0) {
      setTimeout(() => {
        results.analysis.issues.forEach((issue, index) => {
          setTimeout(() => {
            this.showToast('error', `üî¥ ${issue}`, 6000);
          }, index * 2000);
        });
      }, 1000);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if (serverAnalysis?.serverRecommendations) {
      setTimeout(() => {
        this.showToast('info', 'üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TURN –Ω–∞ VPS', 5000);
      }, 3000);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä TURN —Å—Ç–∞—Ç—É—Å–∞
    this.updateTurnStatusIndicator(results);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ TURN
  updateTurnStatusIndicator(results) {
    const turnIndicator = document.getElementById('turnIndicator');
    const turnStatusText = document.getElementById('turnStatusText');
    
    if (!turnIndicator || !turnStatusText) return;
    
    const isWorking = results.analysis?.overallScore > 40;
    const grade = results.analysis?.grade || 'F';
    
    turnIndicator.className = `turn-indicator ${isWorking ? 'active' : 'connecting'}`;
    
    if (isWorking) {
      turnStatusText.textContent = `TURN: –ê–∫—Ç–∏–≤–µ–Ω (${grade})`;
      turnStatusText.parentElement.className = 'turn-status active';
    } else {
      turnStatusText.textContent = `TURN: –ü—Ä–æ–±–ª–µ–º—ã (${grade})`;
      turnStatusText.parentElement.className = 'turn-status';
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  async autoTurnDiagnostics() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    if (this.connectionIssues >= 2 && !this.turnDiagnosticsRunning) {
      this.turnDiagnosticsRunning = true;
      
      console.log('üîç Auto-running TURN diagnostics due to connection issues');
      
      try {
        const results = await this.runTurnDiagnostics();
        
        if (results && results.analysis?.overallScore < 60) {
          // TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          this.showEmergencyTurnRecommendations(results);
        }
      } finally {
        this.turnDiagnosticsRunning = false;
      }
    }
  }

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö TURN
  showEmergencyTurnRecommendations(results) {
    const issues = results.analysis?.issues || [];
    
    let recommendations = [
      'üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å TURN —Å–µ—Ä–≤–µ—Ä–æ–º!',
    ];
    
    if (issues.some(issue => issue.includes('–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'))) {
      recommendations.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      recommendations.push('‚Ä¢ TURN —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω');
    }
    
    if (issues.some(issue => issue.includes('relay'))) {
      recommendations.push('‚Ä¢ TURN relay –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      recommendations.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
    }
    
    if (issues.some(issue => issue.includes('–∑–∞–¥–µ—Ä–∂–∫–∞'))) {
      recommendations.push('‚Ä¢ –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–∏');
      recommendations.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ WiFi –≤–º–µ—Å—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏');
    }
    
    recommendations.push('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
    recommendations.forEach((rec, index) => {
      setTimeout(() => {
        this.showToast(index === 0 ? 'error' : 'warning', rec, 5000);
      }, index * 1500);
    });
  }
}

// Initialize app when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.app = new VideoCallApp();
  });
} else {
  window.app = new VideoCallApp();
}
