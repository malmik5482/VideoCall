// ====== –°–ò–°–¢–ï–ú–ê –í–ò–î–ï–û–ó–í–û–ù–ö–û–í CosmosChat ======

class VideoCallSystem {
    constructor() {
        this.peerConnection = null;
        this.localStream = null;
        this.remoteStream = null;
        this.ws = null;
        this.isInCall = false;
        this.isMuted = false;
        this.isCameraOff = false;
        this.currentRoom = null;
        this.callStartTime = null;
        
        this.ICE_CONFIG = {
            iceServers: [
                // –ú–æ—â–Ω—ã–π TURN —Å–µ—Ä–≤–µ—Ä –¥–ª—è –†–æ—Å—Å–∏–∏
                {
                    urls: [
                        'turn:94.198.218.189:3478?transport=udp',
                        'turn:94.198.218.189:3478?transport=tcp',
                        'turns:94.198.218.189:5349?transport=tcp'
                    ],
                    username: 'webrtc',
                    credential: 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN'
                },
                
                // –†–æ—Å—Å–∏–π—Å–∫–∏–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
                { urls: 'stun:stun.sipnet.ru:3478' },
                { urls: 'stun:stun.comtube.ru:3478' },
                { urls: 'stun:stun.voipbuster.com:3478' },
                
                // –†–µ–∑–µ—Ä–≤–Ω—ã–µ STUN
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ],
            iceCandidatePoolSize: 20,
            rtcpMuxPolicy: 'require',
            bundlePolicy: 'max-bundle'
        };
        
        this.MEDIA_CONSTRAINTS = {
            video: {
                width: { ideal: 1280, max: 1920 },
                height: { ideal: 720, max: 1080 },
                frameRate: { ideal: 30, max: 30 },
                facingMode: 'user'
            },
            audio: {
                sampleRate: 44100,
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            }
        };
        
        this.init();
    }

    init() {
        this.setupWebSocket();
        this.setupEventListeners();
    }

    setupWebSocket() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ WebSocket, —á—Ç–æ –∏ –¥–ª—è —á–∞—Ç–æ–≤
        if (window.chatSystem && window.chatSystem.ws) {
            this.ws = window.chatSystem.ws;
        } else {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π WebSocket, –µ—Å–ª–∏ —á–∞—Ç-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            this.ws = new WebSocket(`${protocol}//${window.location.host}/ws`);
            
            this.ws.onopen = () => {
                console.log('üé• VideoCall WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            };
        }
    }

    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤
        document.addEventListener('DOMContentLoaded', () => {
            if (this.ws) {
                this.ws.addEventListener('message', (event) => {
                    const message = JSON.parse(event.data);
                    this.handleWebSocketMessage(message);
                });
            }
        });
    }

    handleWebSocketMessage(message) {
        switch (message.type) {
            case 'video-call-offer':
                this.handleCallOffer(message);
                break;
            case 'video-call-answer':
                this.handleCallAnswer(message);
                break;
            case 'video-call-ice-candidate':
                this.handleIceCandidate(message);
                break;
            case 'video-call-end':
                this.handleCallEnd(message);
                break;
            case 'description':
                this.handleDescription(message);
                break;
            case 'candidate':
                this.handleCandidate(message);
                break;
            case 'ready':
                this.handleReady(message);
                break;
        }
    }

    async startVideoCall(targetUser = null) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            const permissions = window.authSystem?.permissions;
            if (!permissions?.camera || !permissions?.microphone) {
                NotificationSystem.show('üé• –î–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –Ω—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'warning');
                await this.requestPermissions();
                return;
            }

            NotificationSystem.show('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞...', 'info');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
            this.currentRoom = 'video_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫
            await this.getLocalMedia();
            
            // –°–æ–∑–¥–∞–µ–º peer connection
            await this.createPeerConnection();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
            this.showVideoCallInterface();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
            this.joinVideoRoom();
            
            NotificationSystem.show('üìû –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', error);
            NotificationSystem.show('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫: ' + error.message, 'error');
            this.endCall();
        }
    }

    async getLocalMedia() {
        try {
            this.localStream = await navigator.mediaDevices.getUserMedia(this.MEDIA_CONSTRAINTS);
            
            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = this.localStream;
            }
            
            console.log('üìπ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞:', error);
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        }
    }

    async createPeerConnection() {
        this.peerConnection = new RTCPeerConnection(this.ICE_CONFIG);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => {
                this.peerConnection.addTrack(track, this.localStream);
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
        this.peerConnection.ontrack = (event) => {
            console.log('üì° –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
            this.remoteStream = event.streams[0];
            
            const remoteVideo = document.getElementById('remoteVideo');
            if (remoteVideo) {
                remoteVideo.srcObject = this.remoteStream;
            }
            
            NotificationSystem.show('üéâ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!', 'success');
            this.callStartTime = Date.now();
            this.startCallTimer();
        };
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        this.peerConnection.onicecandidate = (event) => {
            if (event.candidate && this.ws && this.ws.readyState === WebSocket.OPEN) {
                this.ws.send(JSON.stringify({
                    type: 'candidate',
                    candidate: event.candidate
                }));
            }
        };
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.peerConnection.onconnectionstatechange = () => {
            const state = this.peerConnection.connectionState;
            console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', state);
            
            switch (state) {
                case 'connected':
                    NotificationSystem.show('‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏!', 'success');
                    break;
                case 'connecting':
                    NotificationSystem.show('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...', 'info');
                    break;
                case 'disconnected':
                case 'failed':
                    NotificationSystem.show('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
                    this.endCall();
                    break;
            }
        };
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ICE —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.peerConnection.oniceconnectionstatechange = () => {
            console.log('üßä ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.peerConnection.iceConnectionState);
        };
        
        console.log('ü§ù Peer connection —Å–æ–∑–¥–∞–Ω');
    }

    joinVideoRoom() {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'join',
                room: this.currentRoom
            }));
        }
    }

    async handleReady(message) {
        if (!this.peerConnection) return;
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            const offer = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(offer);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            this.ws.send(JSON.stringify({
                type: 'description',
                sdp: offer
            }));
            
            console.log('üì§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }

    async handleDescription(message) {
        if (!this.peerConnection) return;
        
        try {
            await this.peerConnection.setRemoteDescription(message.sdp);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            if (message.sdp.type === 'offer') {
                const answer = await this.peerConnection.createAnswer();
                await this.peerConnection.setLocalDescription(answer);
                
                this.ws.send(JSON.stringify({
                    type: 'description',
                    sdp: answer
                }));
                
                console.log('üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
        }
    }

    async handleCandidate(message) {
        if (!this.peerConnection) return;
        
        try {
            if (message.candidate) {
                await this.peerConnection.addIceCandidate(message.candidate);
                console.log('üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
        }
    }

    showVideoCallInterface() {
        const videoCallOverlay = document.getElementById('videoCallOverlay');
        if (videoCallOverlay) {
            videoCallOverlay.classList.remove('hidden');
            videoCallOverlay.style.display = 'flex';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            videoCallOverlay.classList.add('portal-effect');
            
            this.isInCall = true;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            const appContainer = document.getElementById('appContainer');
            if (appContainer) {
                appContainer.style.filter = 'blur(10px)';
            }
        }
    }

    hideVideoCallInterface() {
        const videoCallOverlay = document.getElementById('videoCallOverlay');
        if (videoCallOverlay) {
            videoCallOverlay.classList.add('hidden');
            videoCallOverlay.style.display = 'none';
            
            this.isInCall = false;
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            const appContainer = document.getElementById('appContainer');
            if (appContainer) {
                appContainer.style.filter = 'none';
            }
        }
    }

    toggleMute() {
        if (!this.localStream) return;
        
        this.isMuted = !this.isMuted;
        
        this.localStream.getAudioTracks().forEach(track => {
            track.enabled = !this.isMuted;
        });
        
        const muteButton = document.getElementById('muteButton');
        if (muteButton) {
            muteButton.innerHTML = this.isMuted 
                ? '<i class="fas fa-microphone-slash"></i>' 
                : '<i class="fas fa-microphone"></i>';
            muteButton.style.opacity = this.isMuted ? '0.5' : '1';
        }
        
        NotificationSystem.show(
            this.isMuted ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω', 
            'info'
        );
    }

    toggleCamera() {
        if (!this.localStream) return;
        
        this.isCameraOff = !this.isCameraOff;
        
        this.localStream.getVideoTracks().forEach(track => {
            track.enabled = !this.isCameraOff;
        });
        
        const cameraButton = document.getElementById('cameraButton');
        if (cameraButton) {
            cameraButton.innerHTML = this.isCameraOff 
                ? '<i class="fas fa-video-slash"></i>' 
                : '<i class="fas fa-video"></i>';
            cameraButton.style.opacity = this.isCameraOff ? '0.5' : '1';
        }
        
        NotificationSystem.show(
            this.isCameraOff ? 'üì∑ –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞' : 'üìπ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞', 
            'info'
        );
    }

    toggleSpeaker() {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        NotificationSystem.show('üîä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–º', 'info');
    }

    endCall() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => track.stop());
            this.localStream = null;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
        if (this.ws && this.ws.readyState === WebSocket.OPEN && this.currentRoom) {
            this.ws.send(JSON.stringify({
                type: 'leave'
            }));
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
        this.hideVideoCallInterface();
        
        // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        
        if (localVideo) localVideo.srcObject = null;
        if (remoteVideo) remoteVideo.srcObject = null;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isInCall = false;
        this.isMuted = false;
        this.isCameraOff = false;
        this.currentRoom = null;
        this.callStartTime = null;
        this.remoteStream = null;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.stopCallTimer();
        
        NotificationSystem.show('üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
        
        console.log('üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    startCallTimer() {
        this.callTimer = setInterval(() => {
            if (this.callStartTime) {
                const duration = Date.now() - this.callStartTime;
                const minutes = Math.floor(duration / 60000);
                const seconds = Math.floor((duration % 60000) / 1000);
                
                const timerDisplay = document.querySelector('.call-timer');
                if (timerDisplay) {
                    timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            }
        }, 1000);
    }

    stopCallTimer() {
        if (this.callTimer) {
            clearInterval(this.callTimer);
            this.callTimer = null;
        }
    }

    async startVoiceCall() {
        // –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
        try {
            this.MEDIA_CONSTRAINTS.video = false; // –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            await this.startVideoCall();
            
            NotificationSystem.show('üìû –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
            NotificationSystem.show('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫', 'error');
        }
    }

    async requestPermissions() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            stream.getTracks().forEach(track => track.stop());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (window.authSystem) {
                window.authSystem.permissions.camera = true;
                window.authSystem.permissions.microphone = true;
                
                localStorage.setItem('cosmosChat_permissions', JSON.stringify(window.authSystem.permissions));
            }
            
            NotificationSystem.show('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            NotificationSystem.show('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', 'error');
            throw error;
        }
    }

    // –°—Ç–∞—Ç—É—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è UI
    getConnectionStatus() {
        if (!this.peerConnection) return 'disconnected';
        return this.peerConnection.connectionState;
    }

    // –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    async getConnectionStats() {
        if (!this.peerConnection) return null;
        
        try {
            const stats = await this.peerConnection.getStats();
            const result = {
                video: { bitrate: 0, packetsLost: 0 },
                audio: { bitrate: 0, packetsLost: 0 }
            };
            
            stats.forEach(report => {
                if (report.type === 'inbound-rtp') {
                    if (report.mediaType === 'video') {
                        result.video.bitrate = report.bytesReceived * 8;
                        result.video.packetsLost = report.packetsLost;
                    } else if (report.mediaType === 'audio') {
                        result.audio.bitrate = report.bytesReceived * 8;
                        result.audio.packetsLost = report.packetsLost;
                    }
                }
            });
            
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function startVideoCall() { window.videoCallSystem?.startVideoCall(); }
function startVoiceCall() { window.videoCallSystem?.startVoiceCall(); }
function toggleMute() { window.videoCallSystem?.toggleMute(); }
function toggleCamera() { window.videoCallSystem?.toggleCamera(); }
function toggleSpeaker() { window.videoCallSystem?.toggleSpeaker(); }
function endCall() { window.videoCallSystem?.endCall(); }

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.videoCallSystem = new VideoCallSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç
window.VideoCallSystem = VideoCallSystem;