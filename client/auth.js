// ====== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò CosmosChat ======

class AuthSystem {
    constructor() {
        this.currentUser = null;
        this.permissions = {
            camera: false,
            microphone: false
        };
        this.init();
    }

    init() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        setTimeout(() => {
            const loadingScreen = document.getElementById('loadingScreen');
            const authScreen = document.getElementById('authScreen');
            
            if (!loadingScreen.classList.contains('hidden') && authScreen.classList.contains('hidden')) {
                console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                this.showAuthScreen();
            }
        }, 5000);
        
        this.checkExistingAuth();
        this.setupEventListeners();
    }

    checkExistingAuth() {
        const savedUser = localStorage.getItem('cosmosChat_user');
        if (savedUser) {
            try {
                this.currentUser = JSON.parse(savedUser);
                console.log('üë§ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.currentUser);
                this.autoLogin();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                localStorage.removeItem('cosmosChat_user');
                this.showAuthScreen();
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            this.showAuthScreen();
        }
    }

    showAuthScreen() {
        const loadingScreen = document.getElementById('loadingScreen');
        const authScreen = document.getElementById('authScreen');
        
        loadingScreen.classList.add('hidden');
        authScreen.classList.remove('hidden');
        
        console.log('üîì –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    async autoLogin() {
        if (!this.currentUser) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.showLoadingScreen();

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        await this.delay(2000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await this.checkPermissions();

        if (this.permissions.camera && this.permissions.microphone) {
            // –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å, –≤—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.enterApp();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            this.showPermissionsScreen();
        }
    }

    showLoadingScreen() {
        const loadingScreen = document.getElementById('loadingScreen');
        const authScreen = document.getElementById('authScreen');
        
        authScreen.classList.add('hidden');
        loadingScreen.classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        const tagline = loadingScreen.querySelector('.tagline');
        if (tagline) {
            tagline.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${this.currentUser.name}!`;
        }
    }

    setupEventListeners() {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        document.addEventListener('input', (e) => {
            if (e.target.type === 'tel') {
                this.formatPhoneNumber(e.target);
            }
        });

        // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const activeForm = document.querySelector('.auth-form:not(.hidden)');
                if (activeForm) {
                    const button = activeForm.querySelector('.cosmic-button');
                    if (button) button.click();
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
        document.addEventListener('click', (e) => {
            if (e.target.matches('#registerBtn, #registerBtn *')) {
                e.preventDefault();
                this.registerUser();
            } else if (e.target.matches('#loginBtn, #loginBtn *')) {
                e.preventDefault();
                this.loginUser();
            } else if (e.target.matches('#requestPermissionsBtn, #requestPermissionsBtn *')) {
                e.preventDefault();
                this.requestPermissions();
            } else if (e.target.matches('.switch-to-login')) {
                e.preventDefault();
                this.switchToLogin();
            } else if (e.target.matches('.switch-to-register')) {
                e.preventDefault();
                this.switchToRegister();
            }
        });
    }

    formatPhoneNumber(input) {
        let value = input.value.replace(/\D/g, '');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º +7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        if (value.length === 0) {
            input.value = '';
            return;
        }
        
        if (value.startsWith('8')) {
            value = '7' + value.substring(1);
        }
        
        if (!value.startsWith('7') && value.length <= 10) {
            value = '7' + value;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        if (value.length >= 1) {
            let formatted = '+7';
            if (value.length > 1) {
                formatted += ' (' + value.substring(1, 4);
                if (value.length >= 5) {
                    formatted += ') ' + value.substring(4, 7);
                    if (value.length >= 8) {
                        formatted += '-' + value.substring(7, 9);
                        if (value.length >= 10) {
                            formatted += '-' + value.substring(9, 11);
                        }
                    }
                }
            }
            input.value = formatted;
        }
    }

    async registerUser() {
        console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const nameInput = document.getElementById('userName');
        const phoneInput = document.getElementById('userPhone');
        
        if (!nameInput || !phoneInput) {
            console.error('‚ùå –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            alert('–û—à–∏–±–∫–∞: –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const name = nameInput.value.trim();
        const phone = this.cleanPhoneNumber(phoneInput.value);
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { name, phone });
        
        if (!this.validateRegistrationData(name, phone)) {
            return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const button = document.querySelector('#registrationForm .cosmic-button');
        this.setButtonLoading(button, true);

        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await this.delay(1500);

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = {
                id: this.generateUserId(),
                name: name,
                phone: phone,
                avatar: this.generateAvatar(name),
                createdAt: new Date().toISOString(),
                status: 'online'
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('cosmosChat_user', JSON.stringify(user));
            this.currentUser = user;

            this.showMessage('üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat!', 'success');

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º
            await ScreenTransitions.fadeOut(document.getElementById('registrationForm'));
            this.showPermissionsScreen();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        } finally {
            this.setButtonLoading(button, false);
        }
    }

    async loginUser() {
        const phoneInput = document.getElementById('loginPhone');
        const phone = this.cleanPhoneNumber(phoneInput.value);
        
        if (!this.validatePhone(phone)) {
            this.showMessage('üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'warning');
            return;
        }

        const button = document.querySelector('#loginForm .cosmic-button');
        this.setButtonLoading(button, true);

        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await this.delay(1200);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const savedUser = localStorage.getItem('cosmosChat_user');
            if (savedUser) {
                const user = JSON.parse(savedUser);
                if (user.phone === phone) {
                    this.currentUser = user;
                    this.showMessage(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.name}!`, 'success');
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º
                    await ScreenTransitions.fadeOut(document.getElementById('loginForm'));
                    this.showPermissionsScreen();
                } else {
                    this.showMessage('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                }
            } else {
                this.showMessage('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.', 'warning');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        } finally {
            this.setButtonLoading(button, false);
        }
    }

    validateRegistrationData(name, phone) {
        if (!name || name.length < 2) {
            this.showMessage('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)');
            return false;
        }

        if (name.length > 50) {
            this.showMessage('üë§ –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)');
            return false;
        }

        if (!this.validatePhone(phone)) {
            this.showMessage('üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            return false;
        }

        return true;
    }

    showMessage(message, type = 'warning') {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.showMessage) {
            window.cosmosApp.modules.notifications.show(message, type);
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - alert
            alert(message);
            console.log(message);
        }
    }

    validatePhone(phone) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: +7XXXXXXXXXX (11 —Ü–∏—Ñ—Ä)
        const phoneRegex = /^7\d{10}$/;
        return phoneRegex.test(phone);
    }

    cleanPhoneNumber(phone) {
        return phone.replace(/\D/g, '');
    }

    generateUserId() {
        return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    generateAvatar(name) {
        const initials = name.split(' ').map(word => word[0]).join('').toUpperCase().substr(0, 2);
        return {
            initials: initials,
            color: this.getAvatarColor(name)
        };
    }

    getAvatarColor(name) {
        const colors = [
            'linear-gradient(135deg, #6366f1, #8b5cf6)',
            'linear-gradient(135deg, #3b82f6, #06b6d4)',
            'linear-gradient(135deg, #06b6d4, #10b981)',
            'linear-gradient(135deg, #10b981, #84cc16)',
            'linear-gradient(135deg, #f59e0b, #ef4444)',
            'linear-gradient(135deg, #ef4444, #ec4899)',
            'linear-gradient(135deg, #ec4899, #8b5cf6)'
        ];
        
        let hash = 0;
        for (let i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) & 0xffffffff;
        }
        
        return colors[Math.abs(hash) % colors.length];
    }

    async showPermissionsScreen() {
        const authScreen = document.getElementById('authScreen');
        const permissionsScreen = document.getElementById('permissionsScreen');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const forms = authScreen.querySelectorAll('.auth-form');
        forms.forEach(form => form.classList.add('hidden'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        await ScreenTransitions.fadeIn(permissionsScreen);
    }

    async requestPermissions() {
        const button = document.querySelector('#permissionsScreen .cosmic-button');
        this.setButtonLoading(button, true);
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            const cameraStatus = document.getElementById('cameraStatus');
            const micStatus = document.getElementById('micStatus');
            
            cameraStatus.textContent = 'üîÑ';
            micStatus.textContent = 'üîÑ';
            
            // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    frameRate: { ideal: 30 }
                },
                audio: {
                    sampleRate: 44100,
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ (–º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
            stream.getTracks().forEach(track => track.stop());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.permissions.camera = true;
            this.permissions.microphone = true;
            
            cameraStatus.textContent = '‚úÖ';
            micStatus.textContent = '‚úÖ';
            
            this.showMessage('üéâ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat!', 'success');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            localStorage.setItem('cosmosChat_permissions', JSON.stringify(this.permissions));
            
            // –í—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.delay(1000);
            await this.enterApp();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            
            const cameraStatus = document.getElementById('cameraStatus');
            const micStatus = document.getElementById('micStatus');
            
            cameraStatus.textContent = '‚ùå';
            micStatus.textContent = '‚ùå';
            
            this.showMessage('‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'warning');
            
            // –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
            setTimeout(() => {
                const skipButton = document.createElement('button');
                skipButton.className = 'cosmic-button secondary';
                skipButton.innerHTML = '<span class="button-text">‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π</span>';
                skipButton.onclick = () => this.enterApp(false);
                
                button.parentElement.appendChild(skipButton);
            }, 2000);
            
        } finally {
            this.setButtonLoading(button, false);
        }
    }

    async checkPermissions() {
        try {
            const permissions = await navigator.permissions.query({ name: 'camera' });
            this.permissions.camera = permissions.state === 'granted';
            
            const micPermissions = await navigator.permissions.query({ name: 'microphone' });
            this.permissions.microphone = micPermissions.state === 'granted';
            
        } catch (error) {
            console.log('Permissions API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é');
        }
    }

    async enterApp(hasPermissions = true) {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const loadingScreen = document.getElementById('loadingScreen');
        const authScreen = document.getElementById('authScreen');
        const appContainer = document.getElementById('appContainer');
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        await ScreenTransitions.morphTransition(
            authScreen.classList.contains('hidden') ? loadingScreen : authScreen,
            appContainer
        );
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.initializeApp(hasPermissions);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.dispatchEvent(new CustomEvent('userAuthenticated', {
            detail: {
                user: this.currentUser,
                permissions: this.permissions
            }
        }));
    }

    initializeApp(hasPermissions) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
        this.updateUserProfile();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç—ã
        if (window.ChatSystem) {
            window.ChatSystem.init();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if (!hasPermissions) {
            this.showMessage(
                '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.',
                'warning',
                8000
            );
        }
        
        console.log('üöÄ CosmosChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.currentUser);
    }

    updateUserProfile() {
        if (!this.currentUser) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const displayName = document.getElementById('displayName');
        if (displayName) {
            displayName.textContent = this.currentUser.name;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        const userInitials = document.getElementById('userInitials');
        if (userInitials) {
            userInitials.textContent = this.currentUser.avatar.initials;
        }
        
        const userAvatar = document.getElementById('userAvatar');
        if (userAvatar) {
            userAvatar.style.background = this.currentUser.avatar.color;
        }
    }

    setButtonLoading(button, loading) {
        if (loading) {
            button.disabled = true;
            const originalText = button.querySelector('.button-text').textContent;
            button.querySelector('.button-text').textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
            button.dataset.originalText = originalText;
        } else {
            button.disabled = false;
            if (button.dataset.originalText) {
                button.querySelector('.button-text').textContent = button.dataset.originalText;
            }
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º
    switchToLogin() {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');
        this.showLoginForm();
    }

    switchToRegister() {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');  
        this.showRegistrationForm();
    }

    showLoginForm() {
        const registrationForm = document.getElementById('registrationForm');
        const loginForm = document.getElementById('loginForm');
        
        registrationForm.classList.add('hidden');
        loginForm.classList.remove('hidden');
    }

    showRegistrationForm() {
        const registrationForm = document.getElementById('registrationForm');
        const loginForm = document.getElementById('loginForm');
        
        loginForm.classList.add('hidden');
        registrationForm.classList.remove('hidden');
    }

    showOldLoginForm() {
        const registrationForm = document.getElementById('registrationForm');
        const loginForm = document.getElementById('loginForm');
        
        ScreenTransitions.fadeOut(registrationForm).then(() => {
            ScreenTransitions.fadeIn(loginForm);
        });
    }

    showRegistrationForm() {
        const loginForm = document.getElementById('loginForm');
        const registrationForm = document.getElementById('registrationForm');
        
        ScreenTransitions.fadeOut(loginForm).then(() => {
            ScreenTransitions.fadeIn(registrationForm);
        });
    }

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout() {
        localStorage.removeItem('cosmosChat_user');
        localStorage.removeItem('cosmosChat_permissions');
        location.reload();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        return this.currentUser;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    isAuthenticated() {
        return !!this.currentUser;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
function registerUser() {
    window.authSystem.registerUser();
}

function loginUser() {
    window.authSystem.loginUser();
}

function requestPermissions() {
    window.authSystem.requestPermissions();
}

function showLoginForm() {
    window.authSystem.showLoginForm();
}

function showRegistrationForm() {
    window.authSystem.showRegistrationForm();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.authSystem = new AuthSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.AuthSystem = AuthSystem;