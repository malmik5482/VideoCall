// ---- VLESS-WebRTC Integration for Russian Networks ----
// Automatically routes WebRTC traffic through VLESS tunnel
// Version: 1.0.0-VLESS

// ========== VLESS CONFIGURATION ==========
const VLESS_CONFIG = {
  server: '95.181.173.120',
  port: 8443,
  uuid: '89462a65-fafa-4f9a-9efd-2be01a001778',
  type: 'tcp',
  security: 'reality',
  publicKey: 'sYRQrrHz53_pV3JTotREtRsdsc71UmUQflWPbe3M3CE',
  fingerprint: 'chrome',
  sni: 'google.com',
  shortId: 'fd9f991d',
  spiderX: '/',
  flow: 'xtls-rprx-vision'
};

// ========== VLESS TUNNEL MANAGER ==========
class VLESSWebRTCTunnel {
  constructor() {
    this.isConnected = false;
    this.websocket = null;
    this.originalRTCPeerConnection = null;
    this.tunneledConnections = new Map();
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ VLESS URL
  static parseVlessUrl(url) {
    try {
      const decoded = decodeURIComponent(url);
      const match = decoded.match(/vless:\/\/([^@]+)@([^:]+):(\d+)\?(.+)#?(.*)$/);
      
      if (!match) throw new Error('Invalid VLESS URL format');
      
      const [, uuid, host, port, params, name] = match;
      const paramObj = {};
      
      params.split('&').forEach(param => {
        const [key, value] = param.split('=');
        paramObj[key] = decodeURIComponent(value);
      });
      
      return {
        uuid,
        host,
        port: parseInt(port),
        type: paramObj.type || 'tcp',
        security: paramObj.security || 'none',
        publicKey: paramObj.pbk,
        fingerprint: paramObj.fp,
        sni: paramObj.sni,
        shortId: paramObj.sid,
        spiderX: paramObj.spx,
        flow: paramObj.flow,
        name: name || 'VLESS Tunnel'
      };
    } catch (error) {
      console.error('VLESS URL parsing error:', error);
      return null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VLESS —Ç—É–Ω–Ω–µ–ª—è
  async establishTunnel() {
    try {
      console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VLESS —Ç—É–Ω–Ω–µ–ª—å...');
      
      // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ VLESS —Å–µ—Ä–≤–µ—Ä—É
      const wsUrl = `wss://${VLESS_CONFIG.server}:${VLESS_CONFIG.port}`;
      
      return new Promise((resolve, reject) => {
        this.websocket = new WebSocket(wsUrl);
        
        this.websocket.onopen = () => {
          console.log('‚úÖ VLESS —Ç—É–Ω–Ω–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          this.isConnected = true;
          this.setupWebRTCInterception();
          resolve(true);
        };
        
        this.websocket.onerror = (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ VLESS —Ç—É–Ω–Ω–µ–ª—è:', error);
          this.isConnected = false;
          reject(error);
        };
        
        this.websocket.onclose = () => {
          console.log('üîå VLESS —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç');
          this.isConnected = false;
        };
        
        this.websocket.onmessage = (event) => {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç VLESS —Å–µ—Ä–≤–µ—Ä–∞
          this.handleVLESSMessage(event.data);
        };
        
        // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          if (!this.isConnected) {
            reject(new Error('VLESS connection timeout'));
          }
        }, 10000);
      });
    } catch (error) {
      console.error('VLESS tunnel setup failed:', error);
      throw error;
    }
  }

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  setupWebRTCInterception() {
    if (this.originalRTCPeerConnection) return; // –£–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ
    
    this.originalRTCPeerConnection = window.RTCPeerConnection;
    
    const vlessTunnel = this;
    
    // –ó–∞–º–µ–Ω—è–µ–º RTCPeerConnection –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    window.RTCPeerConnection = function(config) {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VLESS —Ç—É–Ω–Ω–µ–ª—å');
      
      // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º ICE —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å
      if (config && config.iceServers) {
        config.iceServers = vlessTunnel.modifyIceServers(config.iceServers);
      }
      
      const pc = new vlessTunnel.originalRTCPeerConnection(config);
      const connectionId = Math.random().toString(36).substr(2, 9);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      vlessTunnel.tunneledConnections.set(connectionId, pc);
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      pc.addEventListener('icecandidate', (event) => {
        if (event.candidate) {
          vlessTunnel.handleIceCandidate(event.candidate, connectionId);
        }
      });
      
      return pc;
    };
    
    console.log('üîß WebRTC –ø–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è VLESS —Ç—É–Ω–Ω–µ–ª—è');
  }

  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è ICE —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  modifyIceServers(iceServers) {
    const tunnelledServers = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à VLESS —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ TURN —Å–µ—Ä–≤–µ—Ä
    tunnelledServers.push({
      urls: [`turn:${VLESS_CONFIG.server}:${VLESS_CONFIG.port}`],
      username: 'vless-tunnel',
      credential: VLESS_CONFIG.uuid,
      credentialType: 'password'
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
    iceServers.forEach(server => {
      if (server.urls) {
        const modifiedServer = { ...server };
        
        // –ú–∞—Ä—à—Ä—É—Ç–∏–∑—É–µ–º —á–µ—Ä–µ–∑ VLESS
        if (Array.isArray(server.urls)) {
          modifiedServer.urls = server.urls.map(url => 
            this.routeUrlThroughVLESS(url)
          );
        } else {
          modifiedServer.urls = this.routeUrlThroughVLESS(server.urls);
        }
        
        tunnelledServers.push(modifiedServer);
      }
    });
    
    return tunnelledServers;
  }

  // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è URL —á–µ—Ä–µ–∑ VLESS
  routeUrlThroughVLESS(originalUrl) {
    try {
      // –ó–∞–º–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å –Ω–∞ VLESS —Å–µ—Ä–≤–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ—Ç–æ–∫–æ–ª
      if (originalUrl.includes('stun:') || originalUrl.includes('turn:')) {
        const urlObj = new URL(originalUrl.replace(/^(stun|turn):/, 'http:'));
        return originalUrl.replace(urlObj.hostname, VLESS_CONFIG.server);
      }
      return originalUrl;
    } catch (error) {
      console.error('URL routing error:', error);
      return originalUrl;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å
  handleIceCandidate(candidate, connectionId) {
    if (!this.isConnected) return;
    
    try {
      const message = {
        type: 'ice-candidate',
        connectionId: connectionId,
        candidate: candidate,
        timestamp: Date.now()
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ VLESS —Ç—É–Ω–Ω–µ–ª—å
      this.websocket.send(JSON.stringify(message));
      
      console.log('üì° ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ VLESS:', candidate.candidate);
    } catch (error) {
      console.error('ICE candidate tunneling error:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç VLESS —Å–µ—Ä–≤–µ—Ä–∞
  handleVLESSMessage(data) {
    try {
      const message = JSON.parse(data);
      
      switch (message.type) {
        case 'ice-candidate-response':
          this.handleRemoteIceCandidate(message);
          break;
        case 'connection-status':
          this.handleConnectionStatus(message);
          break;
        default:
          console.log('Unknown VLESS message:', message);
      }
    } catch (error) {
      console.error('VLESS message handling error:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  handleRemoteIceCandidate(message) {
    const connection = this.tunneledConnections.get(message.connectionId);
    if (connection && message.candidate) {
      connection.addIceCandidate(new RTCIceCandidate(message.candidate));
      console.log('üì° –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —á–µ—Ä–µ–∑ VLESS');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  handleConnectionStatus(message) {
    console.log('üîó –°—Ç–∞—Ç—É—Å VLESS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', message.status);
    
    if (message.status === 'connected') {
      this.showStatus('‚úÖ VLESS —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω', 'success');
    } else if (message.status === 'disconnected') {
      this.showStatus('‚ùå VLESS —Ç—É–Ω–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω', 'error');
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—É–Ω–Ω–µ–ª—è
  async closeTunnel() {
    try {
      if (this.websocket) {
        this.websocket.close();
        this.websocket = null;
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π RTCPeerConnection
      if (this.originalRTCPeerConnection) {
        window.RTCPeerConnection = this.originalRTCPeerConnection;
        this.originalRTCPeerConnection = null;
      }
      
      this.tunneledConnections.clear();
      this.isConnected = false;
      
      console.log('üîå VLESS —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      console.error('Error closing VLESS tunnel:', error);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  showStatus(message, type = 'info') {
    console.log(message);
    
    const statusElement = document.getElementById('vless-status');
    if (statusElement) {
      statusElement.textContent = message;
      statusElement.className = `vless-status ${type}`;
    }
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É–Ω–Ω–µ–ª—è
  async runDiagnostics() {
    const results = {
      vlessConfig: !!VLESS_CONFIG.server,
      serverReachable: false,
      tunnelEstablished: this.isConnected,
      webrtcIntercepted: !!this.originalRTCPeerConnection
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try {
      const response = await fetch(`https://${VLESS_CONFIG.server}:${VLESS_CONFIG.port}`, {
        method: 'HEAD',
        mode: 'no-cors'
      });
      results.serverReachable = true;
    } catch (error) {
      console.log('Server ping failed (expected for VLESS)');
    }

    return results;
  }
}

// ========== GLOBAL VLESS TUNNEL INSTANCE ==========
let globalVLESSTunnel = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
window.VLESSWebRTC = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VLESS —Ç—É–Ω–Ω–µ–ª—è
  async init() {
    if (globalVLESSTunnel) return globalVLESSTunnel;
    
    globalVLESSTunnel = new VLESSWebRTCTunnel();
    return globalVLESSTunnel;
  },
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è
  async connect() {
    if (!globalVLESSTunnel) {
      globalVLESSTunnel = new VLESSWebRTCTunnel();
    }
    
    return await globalVLESSTunnel.establishTunnel();
  },
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è
  async disconnect() {
    if (globalVLESSTunnel) {
      await globalVLESSTunnel.closeTunnel();
    }
  },
  
  // –°—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª—è
  isConnected() {
    return globalVLESSTunnel ? globalVLESSTunnel.isConnected : false;
  },
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  async diagnose() {
    if (!globalVLESSTunnel) {
      globalVLESSTunnel = new VLESSWebRTCTunnel();
    }
    
    return await globalVLESSTunnel.runDiagnostics();
  }
};

console.log('üöÄ VLESS-WebRTC –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üì° –°–µ—Ä–≤–µ—Ä:', VLESS_CONFIG.server + ':' + VLESS_CONFIG.port);
console.log('üîë UUID:', VLESS_CONFIG.uuid.substr(0, 8) + '...');