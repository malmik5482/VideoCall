// ====== –°–ò–°–¢–ï–ú–ê –ß–ê–¢–û–í CosmosChat ======

class ChatSystem {
    constructor() {
        this.chats = new Map();
        this.currentChat = null;
        this.messages = new Map();
        this.ws = null;
        this.user = null;
        this.isConnected = false;
        
        this.init();
    }

    init() {
        this.setupWebSocket();
        this.loadChatsFromStorage();
        this.createDemoChats();
        this.renderChatsList();
        
        // –°–ª—É—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.addEventListener('userAuthenticated', (e) => {
            this.user = e.detail.user;
            this.updateUserPresence();
        });
    }

    setupWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/ws`;
        
        console.log('üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            this.isConnected = true;
            console.log('üåê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            NotificationSystem.show('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            this.updateConnectionStatus(true);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
            if (this.user) {
                this.authenticateUser();
            }
        };
        
        this.ws.onmessage = (event) => {
            this.handleMessage(JSON.parse(event.data));
        };
        
        this.ws.onclose = () => {
            this.isConnected = false;
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            this.updateConnectionStatus(false);
            
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => this.setupWebSocket(), 3000);
        };
        
        this.ws.onerror = (error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
            NotificationSystem.show('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        };
    }
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    authenticateUser() {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;
        
        const savedUser = localStorage.getItem('cosmosChat_user');
        if (savedUser) {
            const userData = JSON.parse(savedUser);
            
            this.ws.send(JSON.stringify({
                type: 'login',
                phone: userData.phone,
                name: userData.name
            }));
            
            console.log('üîë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    sendWebSocketMessage(message) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(message));
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
    searchUserOnServer(phone) {
        this.sendWebSocketMessage({
            type: 'search_user',
            query: phone
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    handleSearchResults(message) {
        const { users } = message;
        if (users && users.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const searchModal = window.searchModal || window.userSearchModal;
            if (searchModal && searchModal.showUserResult) {
                searchModal.showUserResult(users[0]);
            }
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            const searchModal = window.searchModal || window.userSearchModal;
            if (searchModal && searchModal.showEmptyResult) {
                searchModal.showEmptyResult();
            }
        }
    }

    handleMessage(message) {
        switch (message.type) {
            case 'connected':
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                if (this.user) {
                    this.authenticateUser();
                }
                break;
            case 'chat_message':
            case 'chat-message':
                this.receiveMessage(message);
                break;
            case 'user_joined':
            case 'user-joined':
                this.handleUserJoined(message);
                break;
            case 'user_left':
            case 'user-left':
                this.handleUserLeft(message);
                break;
            case 'typing':
                this.handleTyping(message);
                break;
            case 'incoming_call':
            case 'video-call-request':
                this.handleVideoCallRequest(message);
                break;
            case 'search_results':
                this.handleSearchResults(message);
                break;
            case 'error':
                NotificationSystem.show(`‚ùå ${message.message}`, 'error');
                break;
        }
    }

    createDemoChats() {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—á–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        const demoChats = [
            {
                id: 'demo-support',
                name: 'üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CosmosChat',
                type: 'support',
                avatar: { initials: '–°–ü', color: 'linear-gradient(135deg, #6366f1, #8b5cf6)' },
                lastMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat! –ö–∞–∫ –¥–µ–ª–∞?',
                lastMessageTime: Date.now() - 300000,
                unreadCount: 1,
                isOnline: true
            },
            {
                id: 'demo-updates',
                name: 'üì° –ù–æ–≤–æ—Å—Ç–∏ –∫–æ—Å–º–æ—Å–∞',
                type: 'channel',
                avatar: { initials: '–ù–ö', color: 'linear-gradient(135deg, #3b82f6, #06b6d4)' },
                lastMessage: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã ‚ú®',
                lastMessageTime: Date.now() - 3600000,
                unreadCount: 0,
                isOnline: true
            },
            {
                id: 'demo-group',
                name: 'üë• –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏',
                type: 'group',
                avatar: { initials: '–ö–ü', color: 'linear-gradient(135deg, #10b981, #84cc16)' },
                lastMessage: '–ê–ª–µ–∫—Å: –ö—Ç–æ –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª–µ—Ç—É? üöÄ',
                lastMessageTime: Date.now() - 7200000,
                unreadCount: 3,
                isOnline: false,
                memberCount: 42
            }
        ];

        demoChats.forEach(chat => {
            this.chats.set(chat.id, chat);
            
            // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            this.createDemoMessages(chat.id);
        });
    }

    createDemoMessages(chatId) {
        const demoMessages = {
            'demo-support': [
                {
                    id: 'msg1',
                    chatId: chatId,
                    senderId: 'support',
                    senderName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                    text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CosmosChat! üöÄ',
                    timestamp: Date.now() - 900000,
                    type: 'text'
                },
                {
                    id: 'msg2',
                    chatId: chatId,
                    senderId: 'support',
                    senderName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                    text: '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, —Å–æ–≤–µ—Ä—à–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏! ‚ú®',
                    timestamp: Date.now() - 600000,
                    type: 'text'
                },
                {
                    id: 'msg3',
                    chatId: chatId,
                    senderId: 'support',
                    senderName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                    text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã! üìπ',
                    timestamp: Date.now() - 300000,
                    type: 'text'
                }
            ],
            'demo-updates': [
                {
                    id: 'upd1',
                    chatId: chatId,
                    senderId: 'system',
                    senderName: '–°–∏—Å—Ç–µ–º–∞',
                    text: 'üåü –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ v2.0: –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ!',
                    timestamp: Date.now() - 3600000,
                    type: 'system'
                }
            ],
            'demo-group': [
                {
                    id: 'grp1',
                    chatId: chatId,
                    senderId: 'alex',
                    senderName: '–ê–ª–µ–∫—Å',
                    text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ –≤ –Ω–∞—à–µ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–µ? üëã',
                    timestamp: Date.now() - 14400000,
                    type: 'text'
                },
                {
                    id: 'grp2',
                    chatId: chatId,
                    senderId: 'maria',
                    senderName: '–ú–∞—Ä–∏—è',
                    text: '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É üöÄ',
                    timestamp: Date.now() - 10800000,
                    type: 'text'
                },
                {
                    id: 'grp3',
                    chatId: chatId,
                    senderId: 'alex',
                    senderName: '–ê–ª–µ–∫—Å',
                    text: '–ö—Ç–æ –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª–µ—Ç—É? üöÄ',
                    timestamp: Date.now() - 7200000,
                    type: 'text'
                }
            ]
        };

        if (demoMessages[chatId]) {
            if (!this.messages.has(chatId)) {
                this.messages.set(chatId, []);
            }
            this.messages.get(chatId).push(...demoMessages[chatId]);
        }
    }

    renderChatsList() {
        const chatsList = document.getElementById('chatsList');
        if (!chatsList) return;

        chatsList.innerHTML = '';

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sortedChats = Array.from(this.chats.values())
            .sort((a, b) => b.lastMessageTime - a.lastMessageTime);

        sortedChats.forEach(chat => {
            const chatElement = this.createChatElement(chat);
            chatsList.appendChild(chatElement);
        });
    }

    createChatElement(chat) {
        const chatEl = document.createElement('div');
        chatEl.className = 'chat-item quantum-hover';
        chatEl.dataset.chatId = chat.id;
        chatEl.onclick = () => this.openChat(chat.id);

        const timeAgo = this.formatTimeAgo(chat.lastMessageTime);
        const unreadBadge = chat.unreadCount > 0 ? 
            `<div class="unread-badge">${chat.unreadCount}</div>` : '';
        
        const onlineIndicator = chat.isOnline ? 
            '<div class="online-indicator"></div>' : '';

        const memberInfo = chat.type === 'group' ? 
            `<div class="member-count">${chat.memberCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>` : '';

        chatEl.innerHTML = `
            <div class="chat-avatar character-aura" style="background: ${chat.avatar.color}">
                <span>${chat.avatar.initials}</span>
                ${onlineIndicator}
            </div>
            <div class="chat-info">
                <div class="chat-header">
                    <h4 class="chat-name">${chat.name}</h4>
                    <span class="chat-time">${timeAgo}</span>
                </div>
                <div class="chat-preview">
                    <p class="last-message">${chat.lastMessage}</p>
                    ${memberInfo}
                </div>
            </div>
            ${unreadBadge}
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        chatEl.style.cssText = `
            display: flex;
            align-items: center;
            padding: 15px 20px;
            cursor: pointer;
            border-radius: 12px;
            margin: 5px 0;
            transition: all 0.3s ease;
            position: relative;
            background: rgba(22, 33, 62, 0.3);
        `;

        return chatEl;
    }

    openChat(chatId) {
        const chat = this.chats.get(chatId);
        if (!chat) return;

        this.currentChat = chat;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        this.updateChatHeader(chat);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        this.renderMessages(chatId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        document.getElementById('messageInputArea').style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const welcomeScreen = document.querySelector('.welcome-screen');
        if (welcomeScreen) {
            welcomeScreen.style.display = 'none';
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        chat.unreadCount = 0;
        this.renderChatsList();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–±–æ—Ä–∞
        this.highlightSelectedChat(chatId);
    }

    updateChatHeader(chat) {
        const chatTitle = document.getElementById('chatTitle');
        const chatStatus = document.getElementById('chatStatus');
        const chatAvatar = document.querySelector('.chat-avatar span');

        if (chatTitle) chatTitle.textContent = chat.name;
        if (chatStatus) {
            if (chat.type === 'group') {
                chatStatus.textContent = `${chat.memberCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
            } else {
                chatStatus.textContent = chat.isOnline ? '–≤ —Å–µ—Ç–∏' : '–±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ';
            }
        }
        if (chatAvatar) chatAvatar.textContent = chat.avatar.initials;
    }

    renderMessages(chatId) {
        const messagesContainer = document.getElementById('messagesContainer');
        if (!messagesContainer) return;

        const messages = this.messages.get(chatId) || [];
        
        messagesContainer.innerHTML = '';
        
        messages.forEach(message => {
            const messageEl = this.createMessageElement(message);
            messagesContainer.appendChild(messageEl);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    createMessageElement(message) {
        const messageEl = document.createElement('div');
        const isOwn = message.senderId === this.user?.id;
        
        messageEl.className = `message ${isOwn ? 'own' : 'other'} teleport-in`;
        
        const time = new Date(message.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        messageEl.innerHTML = `
            <div class="message-content crystal-surface">
                ${!isOwn ? `<div class="sender-name">${message.senderName}</div>` : ''}
                <div class="message-text">${this.formatMessageText(message.text)}</div>
                <div class="message-time">${time}</div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        messageEl.style.cssText = `
            margin: 10px 0;
            display: flex;
            ${isOwn ? 'justify-content: flex-end;' : 'justify-content: flex-start;'}
        `;

        const content = messageEl.querySelector('.message-content');
        content.style.cssText = `
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
            ${isOwn ? 
                'background: linear-gradient(135deg, var(--cosmic-purple), var(--cosmic-blue)); color: white;' : 
                'background: rgba(22, 33, 62, 0.8); color: var(--text-primary);'
            }
            backdrop-filter: blur(10px);
            border: 1px solid rgba(99, 102, 241, 0.2);
        `;

        return messageEl;
    }

    formatMessageText(text) {
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∏ —Å—Å—ã–ª–æ–∫
        return text
            .replace(/:\)/g, 'üòä')
            .replace(/:\(/g, 'üò¢')
            .replace(/:D/g, 'üòÉ')
            .replace(/:\*/g, 'üòò')
            .replace(/<3/g, '‚ù§Ô∏è')
            .replace(/\^_\^/g, 'üòÑ');
    }

    sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const text = messageInput.value.trim();
        
        if (!text || !this.currentChat) return;

        const message = {
            id: 'msg_' + Date.now(),
            chatId: this.currentChat.id,
            senderId: this.user?.id || 'user',
            senderName: this.user?.name || '–í—ã',
            text: text,
            timestamp: Date.now(),
            type: 'text'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        if (!this.messages.has(this.currentChat.id)) {
            this.messages.set(this.currentChat.id, []);
        }
        this.messages.get(this.currentChat.id).push(message);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        this.currentChat.lastMessage = text;
        this.currentChat.lastMessageTime = Date.now();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        if (this.isConnected && this.ws) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            this.ws.send(JSON.stringify({
                type: 'chat_message',
                roomId: this.currentChat.id,
                text: text
            }));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.renderMessages(this.currentChat.id);
        this.renderChatsList();
        
        // –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
        messageInput.value = '';
        this.autoResize(messageInput);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        ButtonParticles.createExplosion(document.getElementById('sendButton'));
    }

    receiveMessage(message) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const chatId = message.chatId;
        
        if (!this.messages.has(chatId)) {
            this.messages.set(chatId, []);
        }
        
        this.messages.get(chatId).push(message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
        const chat = this.chats.get(chatId);
        if (chat) {
            chat.lastMessage = message.text;
            chat.lastMessageTime = message.timestamp;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç
            if (this.currentChat?.id !== chatId) {
                chat.unreadCount++;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (this.currentChat?.id === chatId) {
            this.renderMessages(chatId);
        }
        this.renderChatsList();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (this.currentChat?.id !== chatId) {
            NotificationSystem.show(
                `üí¨ ${message.senderName}: ${message.text.substr(0, 50)}${message.text.length > 50 ? '...' : ''}`,
                'info'
            );
        }
    }

    formatTimeAgo(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (minutes < 60) return `${minutes} –º–∏–Ω`;
        if (hours < 24) return `${hours} —á`;
        if (days < 7) return `${days} –¥`;
        
        return new Date(timestamp).toLocaleDateString('ru-RU');
    }

    highlightSelectedChat(chatId) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        const selectedChat = document.querySelector(`[data-chat-id="${chatId}"]`);
        if (selectedChat) {
            selectedChat.classList.add('selected');
        }
    }

    updateConnectionStatus(connected) {
        const status = document.getElementById('userStatus');
        if (status) {
            status.textContent = connected ? '–í —Å–µ—Ç–∏' : '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...';
            status.className = connected ? 'status online' : 'status offline';
        }
    }

    // –ê–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    autoResize(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    handleMessageInput(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            this.sendMessage();
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    createNewChat() {
        NotificationSystem.show('üöÄ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!', 'info');
    }

    // –ü–æ–∏—Å–∫ –≤ —á–∞—Ç–∞—Ö
    searchChats() {
        const searchInput = document.getElementById('searchInput');
        const query = searchInput.value.toLowerCase();
        
        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(item => {
            const chatName = item.querySelector('.chat-name').textContent.toLowerCase();
            const lastMessage = item.querySelector('.last-message').textContent.toLowerCase();
            
            if (chatName.includes(query) || lastMessage.includes(query)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    filterChats(category) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        document.querySelectorAll('.category').forEach(cat => {
            cat.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Ç—ã
        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(item => {
            const chatId = item.dataset.chatId;
            const chat = this.chats.get(chatId);
            
            if (category === 'all' || 
                (category === 'personal' && chat.type === 'personal') ||
                (category === 'groups' && chat.type === 'group') ||
                (category === 'video' && chat.hasVideo)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveChatsToStorage() {
        const chatsData = {
            chats: Array.from(this.chats.entries()),
            messages: Array.from(this.messages.entries())
        };
        localStorage.setItem('cosmosChat_data', JSON.stringify(chatsData));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    loadChatsFromStorage() {
        const saved = localStorage.getItem('cosmosChat_data');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                this.chats = new Map(data.chats || []);
                this.messages = new Map(data.messages || []);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:', error);
            }
        }
    }

    updateUserPresence() {
        if (this.isConnected && this.user && this.ws && this.ws.readyState === WebSocket.OPEN) {
            try {
                this.ws.send(JSON.stringify({
                    type: 'user-presence',
                    userId: this.user.id,
                    status: 'online'
                }));
            } catch (error) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', error);
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function sendMessage() { window.chatSystem?.sendMessage(); }
function autoResize(textarea) { window.chatSystem?.autoResize(textarea); }
function handleMessageInput(event) { window.chatSystem?.handleMessageInput(event); }
function createNewChat() { window.chatSystem?.createNewChat(); }
function searchChats() { window.chatSystem?.searchChats(); }
function filterChats(category) { window.chatSystem?.filterChats(category); }

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function openUserSearch() { window.userSearchSystem?.openSearch(); }
function closeUserSearch() { window.userSearchSystem?.closeSearch(); }
function searchUserByPhone() { window.userSearchSystem?.searchByPhone(); }
function createChatWithUser() { window.userSearchSystem?.createChat(); }
function callUser() { window.userSearchSystem?.callUser(); }

// ====== –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ======
class UserSearchSystem {
    constructor() {
        this.modal = null;
        this.searchInput = null;
        this.searchResults = null;
        this.searchEmpty = null;
        this.foundUser = null;
        this.init();
    }

    init() {
        this.modal = document.getElementById('userSearchModal');
        this.searchInput = document.getElementById('searchPhone');
        this.searchResults = document.getElementById('searchResults');
        this.searchEmpty = document.getElementById('searchEmpty');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ
        if (this.searchInput) {
            this.searchInput.addEventListener('input', (e) => {
                this.formatPhoneNumber(e.target);
            });
        }
    }

    formatPhoneNumber(input) {
        let value = input.value.replace(/\D/g, '');
        
        if (value.length === 0) {
            input.value = '';
            return;
        }
        
        if (value.startsWith('8')) {
            value = '7' + value.substring(1);
        }
        
        if (!value.startsWith('7')) {
            value = '7' + value;
        }
        
        let formatted = '+7';
        if (value.length > 1) {
            formatted += ' (' + value.substring(1, 4);
            if (value.length >= 5) {
                formatted += ') ' + value.substring(4, 7);
                if (value.length >= 8) {
                    formatted += '-' + value.substring(7, 9);
                    if (value.length >= 10) {
                        formatted += '-' + value.substring(9, 11);
                    }
                }
            }
        }
        input.value = formatted;
    }

    openSearch() {
        console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.modal.classList.remove('hidden');
        this.searchInput.focus();
        this.clearResults();
    }

    closeSearch() {
        console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.modal.classList.add('hidden');
        this.clearResults();
        this.searchInput.value = '';
    }

    clearResults() {
        this.searchResults.classList.add('hidden');
        this.searchEmpty.classList.add('hidden');
        this.foundUser = null;
    }

    async searchByPhone() {
        const phoneInput = this.searchInput.value;
        const cleanPhone = phoneInput.replace(/\D/g, '');
        
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É:', cleanPhone);
        
        if (!this.validatePhone(cleanPhone)) {
            window.cosmosApp?.modules?.notifications?.show('üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'warning') || 
            alert('üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const searchBtn = document.getElementById('searchUserBtn');
        const originalText = searchBtn.querySelector('.button-text').textContent;
        searchBtn.querySelector('.button-text').textContent = 'üîç –ü–æ–∏—Å–∫...';
        searchBtn.disabled = true;

        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const user = this.findUserByPhone(cleanPhone);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞
            await this.delay(1000);
            
            if (user) {
                this.showUserResult(user);
            } else {
                this.showEmptyResult();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            window.cosmosApp?.modules?.notifications?.show('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error') || 
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            searchBtn.querySelector('.button-text').textContent = originalText;
            searchBtn.disabled = false;
        }
    }

    findUserByPhone(phone) {
        // –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const savedUser = localStorage.getItem('cosmosChat_user');
        if (savedUser) {
            const currentUser = JSON.parse(savedUser);
            if (currentUser.phone === phone) {
                return null; // –≠—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            }
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        const demoUsers = [
            { phone: '79001234567', name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞' },
            { phone: '79009876543', name: '–ú–∞–∫—Å–∏–º –ü–µ—Ç—Ä–æ–≤' },
            { phone: '79005556677', name: '–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞' },
            { phone: '79003334455', name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤' },
            { phone: '79007778899', name: '–°–æ—Ñ–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–∞' }
        ];

        const foundUser = demoUsers.find(user => user.phone === phone);
        if (foundUser) {
            return {
                ...foundUser,
                id: `user_${phone}`,
                avatar: this.generateAvatar(foundUser.name),
                status: '–í —Å–µ—Ç–∏'
            };
        }

        return null;
    }

    generateAvatar(name) {
        const initials = name.split(' ').map(word => word[0]).join('').toUpperCase().substr(0, 2);
        const colors = ['#6366f1', '#3b82f6', '#06b6d4', '#ec4899', '#8b5cf6'];
        const color = colors[name.length % colors.length];
        
        return {
            initials: initials,
            color: color
        };
    }

    showUserResult(user) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
        this.foundUser = user;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('userInitials').textContent = user.avatar.initials;
        document.getElementById('userName').textContent = user.name;
        document.getElementById('userPhone').textContent = this.formatPhoneDisplay(user.phone);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
        const avatarElement = document.querySelector('#userResult .user-avatar');
        avatarElement.style.background = `linear-gradient(135deg, ${user.avatar.color}, #3b82f6)`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.searchResults.classList.remove('hidden');
        this.searchEmpty.classList.add('hidden');
    }

    showEmptyResult() {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.searchResults.classList.add('hidden');
        this.searchEmpty.classList.remove('hidden');
    }

    formatPhoneDisplay(phone) {
        if (phone.length === 11) {
            return `+7 (${phone.substring(1, 4)}) ${phone.substring(4, 7)}-${phone.substring(7, 9)}-${phone.substring(9, 11)}`;
        }
        return '+' + phone;
    }

    async createChat() {
        if (!this.foundUser) return;
        
        console.log('üí¨ –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', this.foundUser.name);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const newChat = {
            id: `chat_${this.foundUser.id}`,
            name: this.foundUser.name,
            avatar: this.foundUser.avatar,
            type: 'personal',
            lastMessage: '',
            lastTime: new Date().toISOString(),
            unread: 0,
            status: this.foundUser.status,
            phone: this.foundUser.phone,
            messages: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–∏—Å—Ç–µ–º—É
        if (window.chatSystem) {
            window.chatSystem.chats.push(newChat);
            window.chatSystem.renderChats();
            window.chatSystem.openChat(newChat.id);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            localStorage.setItem('cosmosChat_chats', JSON.stringify(window.chatSystem.chats));
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeSearch();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        window.cosmosApp?.modules?.notifications?.show(`üí¨ –ß–∞—Ç —Å ${this.foundUser.name} —Å–æ–∑–¥–∞–Ω!`, 'success') || 
        alert(`üí¨ –ß–∞—Ç —Å ${this.foundUser.name} —Å–æ–∑–¥–∞–Ω!`);
    }

    async callUser() {
        if (!this.foundUser) return;
        
        console.log('üìû –ó–≤–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', this.foundUser.name);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeSearch();
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
        if (window.videoCallSystem) {
            window.videoCallSystem.startCall({
                targetUser: this.foundUser,
                type: 'video'
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        window.cosmosApp?.modules?.notifications?.show(`üìπ –í—ã–∑—ã–≤–∞–µ–º ${this.foundUser.name}...`, 'info') || 
        alert(`üìπ –í—ã–∑—ã–≤–∞–µ–º ${this.foundUser.name}...`);
    }

    validatePhone(phone) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: 7XXXXXXXXXX (11 —Ü–∏—Ñ—Ä)
        const phoneRegex = /^7\d{10}$/;
        return phoneRegex.test(phone);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.chatSystem = new ChatSystem();
    window.ChatSystem = window.chatSystem;
    window.userSearchSystem = new UserSearchSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç
window.ChatSystem = ChatSystem;