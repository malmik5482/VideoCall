// ---- VideoChat Pro: Agora Edition for Russian Networks ----
// Version: 6.0.0-AGORA
// Ultra-optimized for mobile networks in Russia

// ========== AGORA CONFIGURATION ==========
// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ Agora
const AGORA_CONFIG = {
  APP_ID: '86d591368acb4da89f891b8db54c842a', // –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π App ID
  APP_CERTIFICATE: null, // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ null, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
  CHANNEL: 'videochat-' + Math.random().toString(36).substr(2, 9),
  TOKEN: null // Temporary token –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
};

// ========== IMPORTS AND INITIALIZATION ==========
let AgoraRTC = null;
let localTracks = {
  videoTrack: null,
  audioTrack: null
};
let remoteUsers = {};
let rtc = {
  client: null,
  joined: false
};

// ========== MOBILE NETWORK OPTIMIZATION FOR RUSSIA ==========
const RUSSIAN_MOBILE_SETTINGS = {
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ú–¢–°, –ë–∏–ª–∞–π–Ω, –ú–µ–≥–∞—Ñ–æ–Ω, –¢–µ–ª–µ2
  video: {
    optimizationMode: "detail", // –õ—É—á—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    encoderConfig: {
      width: 640,
      height: 480,
      frameRate: 15,
      bitrateMin: 200,
      bitrateMax: 1000 // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ç–∏
    }
  },
  audio: {
    sampleRate: 48000,
    stereo: false, // Mono –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    bitrate: 48 // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
  }
};

// ========== DOM ELEMENTS ==========
let localVideo, remoteVideo, startButton, hangupButton, statusDiv;

// ========== INITIALIZATION ==========
document.addEventListener('DOMContentLoaded', async () => {
  console.log('üöÄ VideoChat Agora Edition –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
  
  // Initialize DOM elements
  initializeDOMElements();
  
  // Load Agora SDK
  await loadAgoraSDK();
  
  // Initialize UI
  updateUI();
  
  // Network detection
  detectNetworkType();
  
  console.log('‚úÖ Agora VideoChat –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

function initializeDOMElements() {
  localVideo = document.getElementById('localVideo');
  remoteVideo = document.getElementById('remoteVideo');
  startButton = document.getElementById('startButton');
  hangupButton = document.getElementById('hangupButton');
  statusDiv = document.getElementById('status');
  
  if (!localVideo || !remoteVideo || !startButton || !hangupButton || !statusDiv) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã');
  }
}

// ========== AGORA SDK LOADING ==========
async function loadAgoraSDK() {
  return new Promise((resolve, reject) => {
    // Load Agora SDK from CDN
    const script = document.createElement('script');
    script.src = 'https://download.agora.io/sdk/release/AgoraRTC_N-4.20.0.js';
    script.onload = () => {
      AgoraRTC = window.AgoraRTC;
      console.log('‚úÖ Agora SDK –∑–∞–≥—Ä—É–∂–µ–Ω');
      resolve();
    };
    script.onerror = () => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Agora SDK');
      reject();
    };
    document.head.appendChild(script);
  });
}

// ========== NETWORK DETECTION ==========
function detectNetworkType() {
  const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
  let networkType = 'unknown';
  let effectiveType = 'unknown';
  
  if (connection) {
    networkType = connection.type || 'unknown';
    effectiveType = connection.effectiveType || 'unknown';
  }
  
  // Detect Russian mobile carriers
  const userAgent = navigator.userAgent.toLowerCase();
  let carrier = 'unknown';
  
  if (userAgent.includes('mts')) carrier = 'MTS';
  else if (userAgent.includes('beeline')) carrier = 'Beeline';
  else if (userAgent.includes('megafon')) carrier = 'MegaFon';
  else if (userAgent.includes('tele2')) carrier = 'Tele2';
  
  console.log(`üì± –°–µ—Ç—å: ${networkType}, –°–∫–æ—Ä–æ—Å—Ç—å: ${effectiveType}, –û–ø–µ—Ä–∞—Ç–æ—Ä: ${carrier}`);
  
  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ —Ç–∏–ø —Å–µ—Ç–∏
  adaptSettingsForNetwork(effectiveType, carrier);
}

function adaptSettingsForNetwork(effectiveType, carrier) {
  if (effectiveType === '2g' || effectiveType === 'slow-2g') {
    RUSSIAN_MOBILE_SETTINGS.video.encoderConfig = {
      width: 320,
      height: 240,
      frameRate: 10,
      bitrateMin: 50,
      bitrateMax: 200
    };
  } else if (effectiveType === '3g') {
    RUSSIAN_MOBILE_SETTINGS.video.encoderConfig = {
      width: 480,
      height: 360,
      frameRate: 15,
      bitrateMin: 150,
      bitrateMax: 500
    };
  }
  
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å–µ—Ç—å:', RUSSIAN_MOBILE_SETTINGS);
}

// ========== MAIN VIDEOCHAT FUNCTIONS ==========
async function startVideoChat() {
  if (!AGORA_CONFIG.APP_ID || AGORA_CONFIG.APP_ID === 'YOUR_AGORA_APP_ID_HERE') {
    showStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ App ID –≤ AGORA_CONFIG!', 'error');
    return;
  }
  
  try {
    showStatus('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Agora...', 'info');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    let token = null;
    try {
      showStatus('üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω...', 'info');
      const tokenResponse = await fetch('/agora/token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          channelName: AGORA_CONFIG.CHANNEL,
          uid: 0,
          role: 1
        })
      });
      
      if (tokenResponse.ok) {
        const tokenData = await tokenResponse.json();
        token = tokenData.token;
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token ? '–î–∞' : '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –°–æ–∑–¥–∞–µ–º Agora –∫–ª–∏–µ–Ω—Ç
    rtc.client = AgoraRTC.createClient({ 
      mode: "rtc", 
      codec: "vp8" // –õ—É—á—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupAgoraEventHandlers();
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É
    await rtc.client.join(
      AGORA_CONFIG.APP_ID,
      AGORA_CONFIG.CHANNEL,
      token,
      null
    );
    rtc.joined = true;
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    await createLocalTracks();
    
    // –ü—É–±–ª–∏–∫—É–µ–º —Ç—Ä–µ–∫–∏
    await rtc.client.publish([localTracks.audioTrack, localTracks.videoTrack]);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    localTracks.videoTrack.play('localVideo');
    
    showStatus('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω! –ö–∞–Ω–∞–ª: ' + AGORA_CONFIG.CHANNEL, 'success');
    updateUI();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
  }
}

async function createLocalTracks() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫
    localTracks.audioTrack = await AgoraRTC.createMicrophoneAudioTrack({
      encoderConfig: {
        sampleRate: RUSSIAN_MOBILE_SETTINGS.audio.sampleRate,
        stereo: RUSSIAN_MOBILE_SETTINGS.audio.stereo,
        bitrate: RUSSIAN_MOBILE_SETTINGS.audio.bitrate
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
    localTracks.videoTrack = await AgoraRTC.createCameraVideoTrack({
      optimizationMode: RUSSIAN_MOBILE_SETTINGS.video.optimizationMode,
      encoderConfig: RUSSIAN_MOBILE_SETTINGS.video.encoderConfig
    });
    
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:', error);
    throw error;
  }
}

function setupAgoraEventHandlers() {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
  rtc.client.on("user-published", async (user, mediaType) => {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', user.uid, mediaType);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await rtc.client.subscribe(user, mediaType);
    
    if (mediaType === 'video') {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
      const remoteVideoTrack = user.videoTrack;
      remoteVideoTrack.play('remoteVideo');
      
      showStatus('‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!', 'success');
    }
    
    if (mediaType === 'audio') {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–≤—É–∫
      const remoteAudioTrack = user.audioTrack;
      remoteAudioTrack.play();
    }
  });
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
  rtc.client.on("user-unpublished", (user, mediaType) => {
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', user.uid, mediaType);
    showStatus('üìû –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'info');
  });
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
  rtc.client.on("user-left", (user) => {
    console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª:', user.uid);
    showStatus('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
  });
  
  // –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  rtc.client.on("connection-state-change", (curState, prevState) => {
    console.log('üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', prevState, '->', curState);
    
    if (curState === 'DISCONNECTED') {
      showStatus('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
    } else if (curState === 'CONNECTED') {
      showStatus('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    }
  });
}

async function hangupVideoChat() {
  try {
    showStatus('üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫...', 'info');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
    if (localTracks.audioTrack) {
      localTracks.audioTrack.stop();
      localTracks.audioTrack.close();
      localTracks.audioTrack = null;
    }
    
    if (localTracks.videoTrack) {
      localTracks.videoTrack.stop();
      localTracks.videoTrack.close();
      localTracks.videoTrack = null;
    }
    
    // –ü–æ–∫–∏–¥–∞–µ–º –∫–∞–Ω–∞–ª
    if (rtc.joined && rtc.client) {
      await rtc.client.leave();
      rtc.joined = false;
    }
    
    // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (localVideo) localVideo.srcObject = null;
    if (remoteVideo) remoteVideo.srcObject = null;
    
    showStatus('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
    updateUI();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ' + error.message, 'error');
  }
}

// ========== UI MANAGEMENT ==========
function updateUI() {
  const isActive = rtc.joined;
  
  if (startButton) startButton.disabled = isActive;
  if (hangupButton) hangupButton.disabled = !isActive;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞
  const channelInfo = document.getElementById('channelInfo');
  if (channelInfo && isActive) {
    channelInfo.textContent = `–ö–∞–Ω–∞–ª: ${AGORA_CONFIG.CHANNEL}`;
  } else if (channelInfo) {
    channelInfo.textContent = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
  }
}

function showStatus(message, type = 'info') {
  console.log(`üì¢ ${message}`);
  
  if (statusDiv) {
    statusDiv.textContent = message;
    statusDiv.className = 'status-' + type;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (type === 'success') {
      setTimeout(() => {
        if (statusDiv && statusDiv.textContent === message) {
          statusDiv.textContent = '';
          statusDiv.className = '';
        }
      }, 5000);
    }
  }
}

// ========== DIAGNOSTIC FUNCTIONS ==========
async function runAgoraDiagnostics() {
  showStatus('üîç –ó–∞–ø—É—Å–∫ Agora –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...', 'info');
  
  const results = {
    sdk: false,
    camera: false,
    microphone: false,
    network: false
  };
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SDK
    if (AgoraRTC && AGORA_CONFIG.APP_ID && AGORA_CONFIG.APP_ID !== 'YOUR_AGORA_APP_ID_HERE') {
      results.sdk = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—É
    try {
      const testVideoTrack = await AgoraRTC.createCameraVideoTrack();
      testVideoTrack.close();
      results.camera = true;
    } catch (e) {
      console.log('–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', e);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
    try {
      const testAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
      testAudioTrack.close();
      results.microphone = true;
    } catch (e) {
      console.log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
    results.network = navigator.onLine;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const grade = calculateAgoraGrade(results);
    showAgoraDiagnosticResults(results, grade);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    showStatus('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message, 'error');
  }
}

function calculateAgoraGrade(results) {
  const total = Object.keys(results).length;
  const passed = Object.values(results).filter(r => r).length;
  const percentage = (passed / total) * 100;
  
  if (percentage >= 90) return 'A';
  if (percentage >= 80) return 'B';
  if (percentage >= 70) return 'C';
  if (percentage >= 60) return 'D';
  return 'F';
}

function showAgoraDiagnosticResults(results, grade) {
  let message = `üéØ Agora –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –û—Ü–µ–Ω–∫–∞: ${grade}\n`;
  message += `SDK: ${results.sdk ? '‚úÖ' : '‚ùå'}\n`;
  message += `–ö–∞–º–µ—Ä–∞: ${results.camera ? '‚úÖ' : '‚ùå'}\n`;
  message += `–ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${results.microphone ? '‚úÖ' : '‚ùå'}\n`;
  message += `–°–µ—Ç—å: ${results.network ? '‚úÖ' : '‚ùå'}`;
  
  console.log(message);
  showStatus(`–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –û—Ü–µ–Ω–∫–∞: ${grade}`, grade === 'F' ? 'error' : grade === 'A' ? 'success' : 'info');
}

// ========== EVENT LISTENERS ==========
document.addEventListener('DOMContentLoaded', () => {
  // –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const startBtn = document.getElementById('startButton');
  const hangupBtn = document.getElementById('hangupButton');
  const diagnosticBtn = document.getElementById('diagnosticButton');
  
  if (startBtn) startBtn.addEventListener('click', startVideoChat);
  if (hangupBtn) hangupBtn.addEventListener('click', hangupVideoChat);
  if (diagnosticBtn) diagnosticBtn.addEventListener('click', runAgoraDiagnostics);
});

// ========== UTILITY FUNCTIONS ==========
function generateChannelName() {
  return 'videochat-' + Math.random().toString(36).substr(2, 9);
}

function copyChannelToClipboard() {
  if (navigator.clipboard && AGORA_CONFIG.CHANNEL) {
    navigator.clipboard.writeText(AGORA_CONFIG.CHANNEL).then(() => {
      showStatus('üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
    });
  }
}

// ========== GLOBAL ERROR HANDLING ==========
window.addEventListener('error', (event) => {
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
  showStatus('‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ' + event.error.message, 'error');
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', event.reason);
  showStatus('‚ùå –û—à–∏–±–∫–∞ Promise: ' + event.reason, 'error');
});

console.log('üöÄ VideoChat Agora Edition –∑–∞–≥—Ä—É–∂–µ–Ω - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');