// ========== TURN SERVER DIAGNOSTICS ==========
// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TURN —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

class TurnDiagnostics {
  constructor() {
    this.turnServer = '94.198.218.189';
    this.turnPort = 3478;
    this.username = 'webrtc';
    this.credential = 'pRr45XBJgdff9Z2Q4EdTLwOUyqudQjtN';
    
    this.diagnostics = {
      turnReachable: false,
      stunWorking: false,
      relayCapable: false,
      latencyMs: 999,
      throughputKbps: 0,
      packetLoss: 100,
      errorDetails: []
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ TURN —Å–µ—Ä–≤–µ—Ä–∞
  async performCompleteTurnDiagnostics() {
    console.log('üîç Starting comprehensive TURN diagnostics...');
    
    const results = {
      timestamp: Date.now(),
      server: `${this.turnServer}:${this.turnPort}`,
      tests: {}
    };

    try {
      // 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏
      results.tests.connectivity = await this.testTurnConnectivity();
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ STUN —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      results.tests.stun = await this.testStunFunctionality();
      
      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TURN relay
      results.tests.relay = await this.testTurnRelay();
      
      // 4. –ò–∑–º–µ—Ä–µ–Ω–∏–µ latency
      results.tests.latency = await this.measureTurnLatency();
      
      // 5. –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      results.tests.throughput = await this.testTurnThroughput();
      
      // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
      results.tests.transports = await this.testTransportMethods();
      
      // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
      results.analysis = this.analyzeTurnPerformance(results.tests);
      
      console.log('‚úÖ TURN diagnostics completed:', results);
      return results;
      
    } catch (error) {
      console.error('‚ùå TURN diagnostics failed:', error);
      results.error = error.message;
      return results;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ TURN —Å–µ—Ä–≤–µ—Ä–∞
  async testTurnConnectivity() {
    console.log('üåê Testing TURN connectivity...');
    
    const config = {
      iceServers: [{
        urls: `turn:${this.turnServer}:${this.turnPort}?transport=udp`,
        username: this.username,
        credential: this.credential
      }]
    };

    try {
      const pc = new RTCPeerConnection(config);
      const startTime = Date.now();
      
      return new Promise((resolve) => {
        let resolved = false;
        
        const timeout = setTimeout(() => {
          if (!resolved) {
            resolved = true;
            pc.close();
            resolve({
              success: false,
              error: 'Connection timeout after 10 seconds',
              duration: Date.now() - startTime
            });
          }
        }, 10000);

        pc.oniceconnectionstatechange = () => {
          const state = pc.iceConnectionState;
          console.log(`ICE connection state: ${state}`);
          
          if (!resolved && (state === 'connected' || state === 'completed')) {
            resolved = true;
            clearTimeout(timeout);
            pc.close();
            resolve({
              success: true,
              state: state,
              duration: Date.now() - startTime
            });
          } else if (!resolved && state === 'failed') {
            resolved = true;
            clearTimeout(timeout);
            pc.close();
            resolve({
              success: false,
              error: 'ICE connection failed',
              duration: Date.now() - startTime
            });
          }
        };

        pc.createDataChannel('test');
        pc.createOffer().then(offer => pc.setLocalDescription(offer));
      });
      
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ STUN —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  async testStunFunctionality() {
    console.log('üéØ Testing STUN functionality...');
    
    const stunServers = [
      `stun:${this.turnServer}:${this.turnPort}`,
      'stun:stun.l.google.com:19302',
      'stun:stun.sipnet.ru:3478'
    ];

    const results = [];
    
    for (const stunUrl of stunServers) {
      try {
        const result = await this.testSingleStunServer(stunUrl);
        results.push({ server: stunUrl, ...result });
      } catch (error) {
        results.push({ 
          server: stunUrl, 
          success: false, 
          error: error.message 
        });
      }
    }
    
    return {
      servers: results,
      workingCount: results.filter(r => r.success).length,
      totalCount: results.length
    };
  }

  // –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ STUN —Å–µ—Ä–≤–µ—Ä–∞
  async testSingleStunServer(stunUrl) {
    const config = {
      iceServers: [{ urls: stunUrl }]
    };

    const pc = new RTCPeerConnection(config);
    const startTime = Date.now();
    
    return new Promise((resolve) => {
      let candidatesReceived = 0;
      let resolved = false;
      
      const timeout = setTimeout(() => {
        if (!resolved) {
          resolved = true;
          pc.close();
          resolve({
            success: candidatesReceived > 0,
            candidates: candidatesReceived,
            duration: Date.now() - startTime
          });
        }
      }, 5000);

      pc.onicecandidate = (event) => {
        if (event.candidate) {
          candidatesReceived++;
          console.log(`STUN candidate from ${stunUrl}:`, event.candidate.candidate);
        } else if (!resolved) {
          // Gathering completed
          resolved = true;
          clearTimeout(timeout);
          pc.close();
          resolve({
            success: candidatesReceived > 0,
            candidates: candidatesReceived,
            duration: Date.now() - startTime
          });
        }
      };

      pc.createDataChannel('stun-test');
      pc.createOffer().then(offer => pc.setLocalDescription(offer));
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TURN relay —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  async testTurnRelay() {
    console.log('üîÑ Testing TURN relay functionality...');
    
    const config = {
      iceServers: [{
        urls: [
          `turn:${this.turnServer}:${this.turnPort}?transport=udp`,
          `turn:${this.turnServer}:${this.turnPort}?transport=tcp`
        ],
        username: this.username,
        credential: this.credential
      }],
      iceTransportPolicy: 'relay' // Force TURN usage
    };

    const pc = new RTCPeerConnection(config);
    const startTime = Date.now();
    
    return new Promise((resolve) => {
      let relayCandidates = [];
      let resolved = false;
      
      const timeout = setTimeout(() => {
        if (!resolved) {
          resolved = true;
          pc.close();
          resolve({
            success: relayCandidates.length > 0,
            candidates: relayCandidates,
            count: relayCandidates.length,
            duration: Date.now() - startTime,
            error: relayCandidates.length === 0 ? 'No relay candidates received' : null
          });
        }
      }, 15000); // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è TURN

      pc.onicecandidate = (event) => {
        if (event.candidate) {
          const candidate = event.candidate.candidate;
          console.log('TURN candidate:', candidate);
          
          if (candidate.includes('relay') || candidate.includes('turn')) {
            relayCandidates.push(candidate);
            console.log(`‚úÖ TURN relay candidate found: ${candidate}`);
          }
        } else if (!resolved) {
          // Gathering completed
          resolved = true;
          clearTimeout(timeout);
          pc.close();
          resolve({
            success: relayCandidates.length > 0,
            candidates: relayCandidates,
            count: relayCandidates.length,
            duration: Date.now() - startTime
          });
        }
      };

      pc.createDataChannel('relay-test');
      pc.createOffer().then(offer => pc.setLocalDescription(offer));
    });
  }

  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ latency –∫ TURN —Å–µ—Ä–≤–µ—Ä—É
  async measureTurnLatency() {
    console.log('‚è±Ô∏è Measuring TURN latency...');
    
    const measurements = [];
    const attempts = 5;
    
    for (let i = 0; i < attempts; i++) {
      try {
        const startTime = performance.now();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebSocket –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ latency
        const result = await this.singleLatencyMeasurement();
        const latency = performance.now() - startTime;
        
        measurements.push(latency);
        console.log(`Latency measurement ${i + 1}: ${latency.toFixed(2)}ms`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.warn(`Latency measurement ${i + 1} failed:`, error);
      }
    }
    
    if (measurements.length === 0) {
      return {
        success: false,
        error: 'All latency measurements failed'
      };
    }
    
    const avgLatency = measurements.reduce((a, b) => a + b) / measurements.length;
    const minLatency = Math.min(...measurements);
    const maxLatency = Math.max(...measurements);
    
    return {
      success: true,
      average: Math.round(avgLatency),
      min: Math.round(minLatency),
      max: Math.round(maxLatency),
      measurements: measurements.map(m => Math.round(m)),
      quality: avgLatency < 100 ? 'excellent' : 
               avgLatency < 200 ? 'good' : 
               avgLatency < 400 ? 'fair' : 'poor'
    };
  }

  // –û–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ latency
  async singleLatencyMeasurement() {
    // –ü—Ä–æ—Å—Ç–æ–π HTTP ping –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
    const startTime = performance.now();
    
    try {
      await fetch('/healthz', { 
        method: 'HEAD',
        cache: 'no-cache'
      });
      return performance.now() - startTime;
    } catch (error) {
      throw new Error(`Ping failed: ${error.message}`);
    }
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ TURN
  async testTurnThroughput() {
    console.log('üìä Testing TURN throughput...');
    
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–≤–∞ peer connection
    const config = {
      iceServers: [{
        urls: `turn:${this.turnServer}:${this.turnPort}?transport=udp`,
        username: this.username,
        credential: this.credential
      }],
      iceTransportPolicy: 'relay'
    };

    try {
      const pc1 = new RTCPeerConnection(config);
      const pc2 = new RTCPeerConnection(config);
      
      const dataChannel = pc1.createDataChannel('throughput-test', {
        ordered: false,
        maxPacketLifeTime: 3000
      });
      
      let bytesTransferred = 0;
      let testStartTime = 0;
      
      return new Promise((resolve) => {
        const timeout = setTimeout(() => {
          pc1.close();
          pc2.close();
          
          const duration = (Date.now() - testStartTime) / 1000;
          const throughputKbps = duration > 0 ? (bytesTransferred * 8) / (duration * 1000) : 0;
          
          resolve({
            success: bytesTransferred > 0,
            bytesTransferred,
            durationSeconds: duration,
            throughputKbps: Math.round(throughputKbps),
            quality: throughputKbps > 1000 ? 'excellent' :
                    throughputKbps > 500 ? 'good' :
                    throughputKbps > 100 ? 'fair' : 'poor'
          });
        }, 10000);

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pc2.ondatachannel = (event) => {
          const remoteDataChannel = event.channel;
          
          remoteDataChannel.onopen = () => {
            console.log('üì° Data channel opened, starting throughput test...');
            testStartTime = Date.now();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testData = new ArrayBuffer(1024); // 1KB chunks
            const interval = setInterval(() => {
              if (dataChannel.readyState === 'open') {
                try {
                  dataChannel.send(testData);
                  bytesTransferred += testData.byteLength;
                } catch (error) {
                  console.warn('Send error:', error);
                  clearInterval(interval);
                }
              } else {
                clearInterval(interval);
              }
            }, 50); // Send every 50ms
          };
          
          remoteDataChannel.onmessage = (event) => {
            // Echo back for more accurate measurement
            if (remoteDataChannel.readyState === 'open') {
              try {
                remoteDataChannel.send(event.data);
              } catch (error) {
                console.warn('Echo error:', error);
              }
            }
          };
        };
        
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        pc1.onicecandidate = (event) => {
          if (event.candidate) {
            pc2.addIceCandidate(event.candidate);
          }
        };
        
        pc2.onicecandidate = (event) => {
          if (event.candidate) {
            pc1.addIceCandidate(event.candidate);
          }
        };
        
        pc1.createOffer().then(offer => {
          pc1.setLocalDescription(offer);
          pc2.setRemoteDescription(offer);
          return pc2.createAnswer();
        }).then(answer => {
          pc2.setLocalDescription(answer);
          pc1.setRemoteDescription(answer);
        });
      });
      
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  async testTransportMethods() {
    console.log('üöö Testing transport methods...');
    
    const transports = [
      { name: 'UDP', url: `turn:${this.turnServer}:${this.turnPort}?transport=udp` },
      { name: 'TCP', url: `turn:${this.turnServer}:${this.turnPort}?transport=tcp` }
    ];
    
    const results = [];
    
    for (const transport of transports) {
      try {
        const result = await this.testSingleTransport(transport);
        results.push({ ...transport, ...result });
      } catch (error) {
        results.push({
          ...transport,
          success: false,
          error: error.message
        });
      }
    }
    
    return {
      transports: results,
      workingCount: results.filter(t => t.success).length,
      recommendedTransport: this.getRecommendedTransport(results)
    };
  }

  // –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  async testSingleTransport(transport) {
    const config = {
      iceServers: [{
        urls: transport.url,
        username: this.username,
        credential: this.credential
      }],
      iceTransportPolicy: 'relay'
    };

    const pc = new RTCPeerConnection(config);
    const startTime = Date.now();
    
    return new Promise((resolve) => {
      let success = false;
      let resolved = false;
      
      const timeout = setTimeout(() => {
        if (!resolved) {
          resolved = true;
          pc.close();
          resolve({
            success: success,
            duration: Date.now() - startTime,
            error: success ? null : 'Transport connection timeout'
          });
        }
      }, 8000);

      pc.oniceconnectionstatechange = () => {
        const state = pc.iceConnectionState;
        
        if (state === 'connected' || state === 'completed') {
          success = true;
          if (!resolved) {
            resolved = true;
            clearTimeout(timeout);
            pc.close();
            resolve({
              success: true,
              duration: Date.now() - startTime,
              state: state
            });
          }
        } else if (state === 'failed') {
          if (!resolved) {
            resolved = true;
            clearTimeout(timeout);
            pc.close();
            resolve({
              success: false,
              duration: Date.now() - startTime,
              error: 'Transport connection failed'
            });
          }
        }
      };

      pc.createDataChannel('transport-test');
      pc.createOffer().then(offer => pc.setLocalDescription(offer));
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  getRecommendedTransport(results) {
    const working = results.filter(r => r.success);
    
    if (working.length === 0) return 'none';
    
    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º UDP –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    const udp = working.find(r => r.name === 'UDP');
    if (udp) return 'UDP';
    
    const tcp = working.find(r => r.name === 'TCP');
    if (tcp) return 'TCP';
    
    return working[0].name;
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TURN
  analyzeTurnPerformance(tests) {
    const issues = [];
    const recommendations = [];
    let overallScore = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
    if (tests.connectivity && tests.connectivity.success) {
      overallScore += 20;
    } else {
      issues.push('TURN server –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –Ω–∞ VPS');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ STUN
    if (tests.stun && tests.stun.workingCount > 0) {
      overallScore += 15;
    } else {
      issues.push('STUN —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é STUN –ø–æ—Ä—Ç–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ relay
    if (tests.relay && tests.relay.success) {
      overallScore += 25;
    } else {
      issues.push('TURN relay –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ relay');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ latency
    if (tests.latency && tests.latency.success) {
      if (tests.latency.average < 200) {
        overallScore += 20;
      } else {
        overallScore += 10;
        issues.push(`–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${tests.latency.average}ms`);
        recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –±–ª–∏–∂–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ throughput
    if (tests.throughput && tests.throughput.success) {
      if (tests.throughput.throughputKbps > 500) {
        overallScore += 10;
      } else {
        overallScore += 5;
        issues.push(`–ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${tests.throughput.throughputKbps} kbps`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    if (tests.transports && tests.transports.workingCount > 0) {
      overallScore += 10;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    if (tests.transports && tests.transports.recommendedTransport === 'TCP') {
      recommendations.push('–î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è TCP transport');
    }
    
    if (tests.latency && tests.latency.average > 300) {
      recommendations.push('–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π');
    }
    
    return {
      overallScore,
      grade: overallScore >= 80 ? 'A' : overallScore >= 60 ? 'B' : overallScore >= 40 ? 'C' : 'F',
      issues,
      recommendations,
      mobileOptimized: overallScore >= 60 && (!issues.includes('TURN relay –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç'))
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  generateDiagnosticReport(results) {
    return {
      timestamp: Date.now(),
      server: `${this.turnServer}:${this.turnPort}`,
      userAgent: navigator.userAgent,
      connectionType: navigator.connection ? navigator.connection.effectiveType : 'unknown',
      results: results,
      verdict: results.analysis.grade,
      criticalIssues: results.analysis.issues,
      recommendations: results.analysis.recommendations
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
if (typeof module !== 'undefined' && module.exports) {
  module.exports = TurnDiagnostics;
} else if (typeof window !== 'undefined') {
  window.TurnDiagnostics = TurnDiagnostics;
}