// ========== RUSSIAN NETWORK DIAGNOSTICS MODULE ==========
// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö

class RussianNetworkDiagnostics {
  constructor() {
    this.diagnostics = {
      connectionType: 'unknown',
      effectiveSpeed: 0,
      rtt: 0,
      packetLoss: 0,
      networkQuality: 'unknown',
      vpnDetected: false,
      mobileDetected: false,
      turnRequired: false
    };
    
    this.diagnosticHistory = [];
    this.isMonitoring = false;
    this.monitoringInterval = null;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ IP/—Å–µ—Ç–∏
  detectRussianProvider() {
    const providers = {
      rostelecom: ['rostelecom', 'rt.ru', 'south.rt.ru'],
      mts: ['mts.ru', 'mts', 'mtsbank'],
      beeline: ['beeline.ru', 'corbina.ru'],
      megafon: ['megafon.ru', 'megafon'],
      tele2: ['tele2.ru', 'tele2'],
      yota: ['yota.ru', 'yota'],
      sknt: ['sknt.ru'],
      tattelecom: ['tattelecom.ru']
    };

    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ connection API
    if ('connection' in navigator && navigator.connection.type) {
      const connectionType = navigator.connection.type.toLowerCase();
      
      for (const [provider, domains] of Object.entries(providers)) {
        if (domains.some(domain => connectionType.includes(domain))) {
          return provider;
        }
      }
    }

    return 'unknown';
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
  async detectVPNUsage() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ WebRTC —É—Ç–µ—á–∫—É IP
      const pc = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });

      const localIPs = [];
      
      pc.createDataChannel('');
      
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);

      return new Promise((resolve) => {
        pc.onicecandidate = (ice) => {
          if (!ice || !ice.candidate || !ice.candidate.candidate) return;
          
          const candidate = ice.candidate.candidate;
          const ipMatch = candidate.match(/([0-9]{1,3}(\.[0-9]{1,3}){3})/);
          
          if (ipMatch) {
            const ip = ipMatch[1];
            if (localIPs.indexOf(ip) === -1) {
              localIPs.push(ip);
            }
          }
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ IP
          const hasPrivateIP = localIPs.some(ip => 
            ip.startsWith('192.168.') || 
            ip.startsWith('10.') || 
            ip.startsWith('172.')
          );
          
          const hasPublicIP = localIPs.some(ip => 
            !ip.startsWith('192.168.') && 
            !ip.startsWith('10.') && 
            !ip.startsWith('172.') &&
            !ip.startsWith('127.')
          );

          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ IP –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ VPN
          const vpnSuspicious = !hasPrivateIP || localIPs.length > 3;
          
          setTimeout(() => {
            pc.close();
            resolve({
              detected: vpnSuspicious,
              confidence: vpnSuspicious ? 0.7 : 0.3,
              ips: localIPs
            });
          }, 2000);
        };
      });
    } catch (error) {
      console.warn('VPN detection failed:', error);
      return { detected: false, confidence: 0, ips: [] };
    }
  }

  // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π)
  async measureConnectionSpeed() {
    const testSizes = [100, 500, 1000]; // KB
    const testResults = [];

    for (const size of testSizes) {
      try {
        const startTime = Date.now();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        const testData = new Array(size * 1024).fill('x').join('');
        const blob = new Blob([testData], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ fetch
        const response = await fetch(url);
        await response.text();
        
        const endTime = Date.now();
        const durationMs = endTime - startTime;
        const speedKbps = (size * 8) / (durationMs / 1000); // kbit/s
        
        testResults.push(speedKbps);
        URL.revokeObjectURL(url);
        
      } catch (error) {
        console.warn(`Speed test failed for ${size}KB:`, error);
      }
    }

    if (testResults.length === 0) return 0;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    testResults.sort((a, b) => a - b);
    return testResults[Math.floor(testResults.length / 2)];
  }

  // –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
  async testRussianServerLatency() {
    const russianServers = [
      'ya.ru',
      'mail.ru',
      'vk.com',
      'sberbank.ru',
      'rt.ru'
    ];

    const latencyResults = [];

    for (const server of russianServers) {
      try {
        const startTime = Date.now();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º image loading –¥–ª—è —Ç–µ—Å—Ç–∞ latency (–æ–±—Ö–æ–¥–∏—Ç CORS)
        await new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = resolve;
          img.onerror = reject;
          img.src = `https://${server}/favicon.ico?t=${Date.now()}`;
          
          setTimeout(reject, 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        const latency = Date.now() - startTime;
        latencyResults.push(latency);
        
      } catch (error) {
        console.warn(`Latency test failed for ${server}:`, error);
      }
    }

    if (latencyResults.length === 0) return 999;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é latency
    latencyResults.sort((a, b) => a - b);
    return latencyResults[Math.floor(latencyResults.length / 2)];
  }

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —Å–µ—Ç–∏
  async performCompleteDiagnostics() {
    console.log('üîç Starting Russian network diagnostics...');
    
    const startTime = Date.now();
    
    try {
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏
      if ('connection' in navigator) {
        const conn = navigator.connection;
        this.diagnostics.effectiveSpeed = conn.downlink || 0;
        this.diagnostics.connectionType = conn.effectiveType || 'unknown';
      }

      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      this.diagnostics.mobileDetected = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º VPN
      const vpnTest = await this.detectVPNUsage();
      this.diagnostics.vpnDetected = vpnTest.detected;

      // 4. –ò–∑–º–µ—Ä—è–µ–º latency –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º
      this.diagnostics.rtt = await this.testRussianServerLatency();

      // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      this.diagnostics.provider = this.detectRussianProvider();

      // 6. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ç–∏
      this.evaluateNetworkQuality();

      // 7. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å TURN
      this.determineTurnRequirement();

      const diagnosticTime = Date.now() - startTime;
      console.log(`‚úÖ Diagnostics completed in ${diagnosticTime}ms:`, this.diagnostics);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.diagnosticHistory.push({
        timestamp: Date.now(),
        results: { ...this.diagnostics },
        duration: diagnosticTime
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (this.diagnosticHistory.length > 10) {
        this.diagnosticHistory = this.diagnosticHistory.slice(-10);
      }

      return this.diagnostics;
      
    } catch (error) {
      console.error('Diagnostics failed:', error);
      return this.diagnostics;
    }
  }

  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
  evaluateNetworkQuality() {
    let qualityScore = 0;

    // –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (this.diagnostics.effectiveSpeed > 50) qualityScore += 30;
    else if (this.diagnostics.effectiveSpeed > 10) qualityScore += 20;
    else if (this.diagnostics.effectiveSpeed > 1) qualityScore += 10;

    // –û—Ü–µ–Ω–∫–∞ –ø–æ latency
    if (this.diagnostics.rtt < 50) qualityScore += 30;
    else if (this.diagnostics.rtt < 100) qualityScore += 20;
    else if (this.diagnostics.rtt < 200) qualityScore += 10;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if (this.diagnostics.vpnDetected) qualityScore -= 15; // VPN —É—Ö—É–¥—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.diagnostics.mobileDetected) qualityScore -= 10; // –ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    if (qualityScore >= 50) this.diagnostics.networkQuality = 'excellent';
    else if (qualityScore >= 35) this.diagnostics.networkQuality = 'good';
    else if (qualityScore >= 20) this.diagnostics.networkQuality = 'fair';
    else this.diagnostics.networkQuality = 'poor';
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TURN —Å–µ—Ä–≤–µ—Ä–∞
  determineTurnRequirement() {
    let turnScore = 0;

    // –§–∞–∫—Ç–æ—Ä—ã, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ TURN
    if (this.diagnostics.mobileDetected) turnScore += 30;
    if (this.diagnostics.vpnDetected) turnScore += 25;
    if (this.diagnostics.rtt > 200) turnScore += 20;
    if (this.diagnostics.networkQuality === 'poor') turnScore += 30;
    if (this.diagnostics.provider === 'unknown') turnScore += 15;

    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ NAT
    const problematicProviders = ['mts', 'tele2', 'yota'];
    if (problematicProviders.includes(this.diagnostics.provider)) {
      turnScore += 20;
    }

    this.diagnostics.turnRequired = turnScore > 40;
    this.diagnostics.turnPriority = turnScore > 60 ? 'high' : turnScore > 40 ? 'medium' : 'low';
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  getOptimizationRecommendations() {
    const recommendations = [];

    if (this.diagnostics.mobileDetected) {
      recommendations.push({
        type: 'network',
        priority: 'high',
        title: '–ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å',
        description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
        action: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ WiFi –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ'
      });
    }

    if (this.diagnostics.vpnDetected) {
      recommendations.push({
        type: 'vpn',
        priority: 'medium',
        title: 'VPN –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
        description: 'VPN –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        action: '–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å VPN'
      });
    }

    if (this.diagnostics.rtt > 200) {
      recommendations.push({
        type: 'latency',
        priority: 'high',
        title: '–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞',
        description: `–ó–∞–¥–µ—Ä–∂–∫–∞ ${this.diagnostics.rtt}ms —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è`,
        action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
      });
    }

    if (this.diagnostics.turnRequired) {
      recommendations.push({
        type: 'turn',
        priority: 'high',
        title: '–¢—Ä–µ–±—É–µ—Ç—Å—è TURN —Å–µ—Ä–≤–µ—Ä',
        description: '–í–∞—à–∞ —Å–µ—Ç—å —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TURN —Å–µ—Ä–≤–µ—Ä–∞',
        action: 'TURN —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      });
    }

    if (this.diagnostics.effectiveSpeed < 1) {
      recommendations.push({
        type: 'speed',
        priority: 'critical',
        title: '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å',
        description: '–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤',
        action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
      });
    }

    return recommendations;
  }

  // –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  startContinuousMonitoring(callback, interval = 30000) {
    if (this.isMonitoring) {
      this.stopContinuousMonitoring();
    }

    this.isMonitoring = true;
    this.monitoringInterval = setInterval(async () => {
      const results = await this.performCompleteDiagnostics();
      if (callback && typeof callback === 'function') {
        callback(results);
      }
    }, interval);

    console.log('üîÑ Started continuous network monitoring');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stopContinuousMonitoring() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    console.log('‚èπÔ∏è Stopped continuous network monitoring');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  exportDiagnosticsReport() {
    const report = {
      timestamp: Date.now(),
      userAgent: navigator.userAgent,
      current: this.diagnostics,
      history: this.diagnosticHistory,
      recommendations: this.getOptimizationRecommendations(),
      metadata: {
        version: '1.0.0',
        region: 'Russia',
        optimized: true
      }
    };

    return report;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
if (typeof module !== 'undefined' && module.exports) {
  module.exports = RussianNetworkDiagnostics;
} else if (typeof window !== 'undefined') {
  window.RussianNetworkDiagnostics = RussianNetworkDiagnostics;
}